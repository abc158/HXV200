###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:32
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\海尔\新版+8k解码+预约\src\wifi\wifi_demo2\SimSweep_demo2.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\wifi\wifi_demo2\SimSweep_demo2.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  
#        F:\海尔\新版+8k解码+预约\project\Debug\List\SimSweep_demo2.lst
#    Object file  =  
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\SimSweep_demo2.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\wifi\wifi_demo2\SimSweep_demo2.c
      1          #include <ui-config.h>
      2          #include "ui-commands.h"
      3          #include "am_date_base.h"
      4          #include "am_config_macro.h"
      5          #include "time.h"
      6          #include "lib.h"
      7          #include "local_key_check.h"
      8          #include "syscall_api.h"
      9          #include "remote.h"
     10          #include "act.h"
     11          #include "display.h"
     12          #include "am_key.h"
     13          #include "sensor/sensor.h"
     14          #include "ui-manager/exception.h"
     15          #include "motor/robot_suction.h"
     16          #include "ui-song-player.h"
     17          #include "display.h"
     18          
     19          #include "simwifi_demo2.h"
     20          #include "SimSweep_demo2.h"
     21          
     22          #if defined(USE_WIFI_DEMO_2)
     23          static U16 uart_cmd = 0;
     24          static tm tmp_day;
     25          static U16 map_index=0;
     26          
     27          U8 send_map_flag = 0;
     28          U8 receive_map_ok_flag = 0;
     29          static U8 type_three_ok=0;
     30          tm current_day_p; 
     31          static real_map_points_t map_points_data;
     32          
     33          static sys_state_info sys_state_info_p;  
     34          static schedule_time_info schedule_info;
     35          extern U8 wificonnectok;
     36          extern U8 send_config_cmd;
     37          extern U8 recive_connect_cmd_ok;
     38          extern U8 type_three_ok;
     39          
     40          
     41          
     42          extern U8 get_bat_level(void);
     43          extern U8 get_remote_state(void);
     44          
     45          
     46          extern tm *get_system_time_info(void);
     47          extern schedule_time_info *get_system_schedule_info(void);
     48          
     49          
     50          void send_robot_state_to_wifi(void);
     51          void send_base_info(void)
     52          {
     53             
     54          }
     55          
     56          void parser_wifi_state(U8 *data_buf)
     57          {
     58              U16 tmp1,tmp2,tmp3;
     59              tmp1=data_buf[0];
     60              tmp2=data_buf[1];
     61              tmp3=data_buf[2];
     62             // printf("data0=%d,data1=%d,data2=%d\r\n",tmp1,tmp2,tmp3);
     63              if(data_buf[0] == 0)
     64              {
     65                 // printf("wifi 1\r\n");
     66                  if(get_reset_wifi_flag() == 1)
     67                  {
     68                      set_reset_wifi_flag(2);
     69                  }
     70                  wificonnectok = 0;
     71                 // set_wifi_state(WIFI_CONNECTING);
     72              }
     73              else if((data_buf[0] == 0)&&(data_buf[1] == 1)&&(data_buf[2] == 1))
     74              {
     75                 // printf("wifi 3\r\n");
     76                  if(get_reset_wifi_flag() == 2)
     77                  {
     78                      set_reset_wifi_flag(0);
     79                  }
     80                  set_wifi_state(WIFI_CONNECT_OK);
     81                  wificonnectok = 1;
     82              }
     83              else
     84              {
     85                  wificonnectok = 0;
     86              }
     87              
     88          }
     89          
     90          void set_schedule(U8 *pAppointBuf)  
     91          {
     92              uint8_t i,j,tmp;
     93              schedule_time_info *schedule_info_p;
     94              schedule_info_p = get_schedule_info();
     95          
     96              tmp = (pAppointBuf[0]&0x40)>>6;
     97              schedule_info_p->SCH_ENABLE.BYTE = (pAppointBuf[0]<<1)|tmp;
     98           
     99              schedule_info_p->t[0].hour = pAppointBuf[13];
    100              schedule_info_p->t[0].min  = pAppointBuf[14];
    101              
    102              j = 1;
    103              for(i=1;i<7;i++)
    104              {
    105                  schedule_info_p->t[i].hour = pAppointBuf[j];
    106                  schedule_info_p->t[i].min  = pAppointBuf[j+1];
    107                  j += 2;
    108              }
    109          
    110              send_schedule_cmd();
    111            
    112          }
    113          
    114          void set_time(U8 *data_buf)
    115          {
    116              sys_info_get(SYS_TIME_INFO,(long )&current_day_p);
    117          
    118              /*
    119              tmp_day.w_year  = current_day_p.w_year;
    120              tmp_day.w_month = current_day_p.w_month;
    121              tmp_day.w_date  = current_day_p.w_date;
    122              */
    123              tmp_day.w_year  = 0;
    124              tmp_day.w_month = 0;
    125              tmp_day.w_date  = 0;
    126              data_buf[3] = data_buf[3] + 1;
    127              if(data_buf[3] == 7)
    128                tmp_day.week = 0;
    129              else
    130                tmp_day.week = data_buf[3];
    131             
    132              tmp_day.hour    = data_buf[0];
    133              tmp_day.min     = data_buf[1];
    134              tmp_day.sec     = data_buf[2];
    135              set_current_time(&tmp_day); 
    136              send_time_cmd(); //写入主板的RTC,这里写入主控不更新时间，在disp写入
    137          	/*主控要隔几秒才更新时间，这里做个临时变量，在disp里调用*/
    138          }
    139          
    140          void parser_control_cmd(U8 *data_buf)
    141          {
    142              switch(data_buf[0])
    143          	{
    144          		case 0x10:
    145          			if(0x00 == data_buf[1])
    146          			{
    147          				uart_cmd = UART_POWER_DOWN;
    148          			}
    149          			if(0x01 == data_buf[1])
    150          			{
    151          				uart_cmd = UART_POWER_ON;
    152          			}
    153          			break;
    154          		case 0x20:
    155          			break;
    156          		case 0x21:
    157          			if(0x00 == data_buf[1])
    158          			{
    159                         // printf("forward\r\n");
    160          				uart_cmd = UART_FORWARD;
    161          			}
    162          			if(0x01 == data_buf[1])
    163          			{
    164          				uart_cmd = UART_LEFT;
    165          			}
    166          			if(0x02 == data_buf[1])
    167          			{
    168          				uart_cmd = UART_RIGHT;
    169          			}
    170          			if(0x03 == data_buf[1])
    171          			{
    172          				uart_cmd = UART_BACK;
    173          			}
    174          			break;
    175          		case 0x22:
    176          			if(0x00 == data_buf[1])
    177          			{
    178          				uart_cmd = UART_WALL_FOLLOW;
    179          			}
    180          			if(0x01 == data_buf[1])
    181          			{
    182          				uart_cmd = UART_SPOT;
    183          			}
    184          			if(0x02 == data_buf[1])
    185          			{
    186          				uart_cmd = UART_START;
    187          			}
    188          			if(0x03 == data_buf[1])
    189          			{
    190          				uart_cmd = UART_DOCK;
    191          			}
    192          			break;
    193          		case 0x23:
    194          			break;
    195          		case 0x24:
    196          			break;
    197          		case 0x25:
    198          			break;
    199          		case 0x26:
    200                      if(0x00 == data_buf[1])
    201          			{
    202          				uart_cmd = UART_STOP;
    203          			}
    204          			if(0x01 == data_buf[1])
    205          			{
    206          				uart_cmd = UART_START;
    207          			}
    208          			break;
    209          		case 0x27:
    210                     // send_robot_state_to_wifi();
    211          			break;
    212          		case 0x28:
    213          			break;
    214          		case 0x40:
    215          			break;
    216          		case 0x42:
    217          			break;
    218          		case 0x30:
    219                      set_schedule(&data_buf[1]);
    220          			break;
    221          		case 0x31:
    222                      set_time(&data_buf[1]);
    223          			break;	
    224          	}
    225          }
    226          
    227          void send_robot_state_to_wifi(void)
    228          {
    229              U8 i,j;
    230              UI_STATE_E s;
    231              
    232          
    233              U8 msg[28]={0};
    234              U8 tmp = get_remote_state();
    235             
    236             
    237              sys_info_get(SYS_STATE_INFO, (long )&sys_state_info_p);
    238               s = get_ui_state();
    239              if(s != UI_ENTER_SLEEPING)
    240              {
    241                  msg[0]=1; 
    242              }
    243          
    244              if((sys_state_info_p.robot_state == ROBOT_STATE_CLEANING_ROOM)
    245                  ||(sys_state_info_p.robot_state == ROBOT_STATE_PAUSE)
    246                  ||(sys_state_info_p.robot_state == ROBOT_STATE_REMOTE_DRIVE))
    247              {
    248                  msg[2]=tmp;
    249              }
    250              else
    251              {
    252                  msg[2]=REMOTE_IDLE;
    253              }
    254          
    255            
    256              if(sys_state_info_p.robot_state == ROBOT_STATE_WALLFOLLOW)
    257              {
    258                 msg[3] = 0; //延边状态
    259              }
    260              else if(sys_state_info_p.robot_state == ROBOT_STATE_CLEANING_ROOM)
    261              {
    262                  msg[3] = 0x2; 
    263              }
    264              else if(sys_state_info_p.robot_state == ROBOT_STATE_SPOTTING)
    265              {
    266                  msg[3] = 0x1;
    267              }
    268              else if(sys_state_info_p.robot_state == ROBOT_STATE_DOCK)
    269              {
    270                  msg[3] = 0x3;
    271              }
    272              else
    273              {
    274                  msg[3] = 0x4;
    275              }
    276          
    277              //msg[10] = ((schedule_info_p->SCH_ENABLE.BYTE)&0x01)<<6;
    278              sys_info_get(SYS_SCHEDULE_INFO, (long )&schedule_info);
    279              tmp = ((schedule_info.SCH_ENABLE.BYTE)&0x01)<<6;
    280              msg[10] =((schedule_info.SCH_ENABLE.BYTE)>>1)|tmp;
    281              j = 0;
    282              for(i=1;i<7;i++)
    283              {
    284                 msg[j+11]=schedule_info.t[i].hour;
    285                 msg[j+12]=schedule_info.t[i].min;
    286                 j += 2;
    287              }
    288              
    289              msg[23]=schedule_info.t[0].hour;
    290              msg[24]=schedule_info.t[0].min;
    291          
    292              msg[25] = sys_state_info_p.pause_id;
    293          
    294              msg[26] = get_bat_level();
    295          
    296              msg[27] = songplayer_is_playing();
    297              
    298              send_pack(CMD_GET_ROBOT_STATE, msg, 28); 
    299              
    300          }
    301          
    302          void parser_map_info(U8 *data_buf)
    303          {
    304              if((data_buf[0] == 0x1)||(data_buf[0] == 0x2))
    305              {
    306                  //printf("receive map ok\r\n");
    307                  send_map_flag = 0;
    308                  receive_map_ok_flag = 1;
    309              }
    310          
    311          }
    312          
    313          void send_map_data_to_wifi(void)
    314          {
    315            U8 *p;
    316            U8 i,j;
    317            U8 tmp_index;
    318            U8 msg[85]={0};
    319            U16 tmp_x,tmp_y,tmp_length;
    320           
    321            
    322            msg[0] = 0x1;  //type
    323            msg[1] = 0x40; // 总点数2byte  
    324            msg[2] = 0x00; //
    325            msg[3] = 0x00; //
    326            //msg[4] = 0x01; //当前包上传位置点数2byte
    327            if(((map_points_data.count > 0)&&(type_three_ok == 1))
    328                  ||(map_points_data.count>= 5))
    329            {
    330              type_three_ok = 0;
    331          
    332              if(map_points_data.count > 10)
    333              {
    334                  tmp_length = 10;
    335              }
    336              else
    337              {
    338                  tmp_length = map_points_data.count;
    339              }
    340              msg[4] = tmp_length;
    341              j = 0;
    342              for(i=0;i<tmp_length;i++)
    343              {
    344                  map_index = map_index + 1;
    345                  msg[5+j] = (map_index >> 8); //索引2byte
    346                  msg[6+j] = map_index&0x00ff;
    347                  //AM_DEBUG_TEST("index:%d\r\n",map_index);
    348                  msg[7+j] = 0x0;
    349                  msg[8+j] = map_points_data.points[i].x;
    350          
    351                  msg[9+j]  = 0x0;
    352                  msg[10+j] = map_points_data.points[i].y;
    353                  msg[11+j] = map_points_data.points[i].type;
    354                  msg[12+j]=0; 
    355                  //printf("map_index=%d\r\n",map_index);
    356                  /*
    357                  if(map_points_data.points[i].type == 1)
    358                  {
    359                      printf("$@%d,%d!\r\n",map_points_data.points[i].x,map_points_data.points[i].y);
    360                  }
    361                  if(map_points_data.points[i].type == 2)
    362                  {
    363                      printf("$#%d,%d!\r\n",map_points_data.points[i].x,map_points_data.points[i].y);
    364                  }
    365                  if(map_points_data.points[i].type == 3)
    366                  {
    367                      printf("$&%d,%d!\r\n",map_points_data.points[i].x,map_points_data.points[i].y);
    368                  }
    369                  */
    370                  j += 8;
    371              }
    372                map_points_data.count = 0;
    373                send_map_flag = 1;
    374                receive_map_ok_flag = 0;
    375            
    376                send_pack(CMD_MAP, msg, (j+5));   
    377               // printf("map:x:%d,y:%d,type:%d\r\n",save_x,save_y,save_type);
    378          
    379            }
    380            /*
    381            else if(send_map_flag = 1)
    382            {
    383                msg[5] = (map_index >> 8); //索引2byte
    384                msg[6] = map_index&0x00ff;
    385               // tmp_x = current_point->x;
    386               // tmp_y = current_point->y;
    387                msg[7] = 0x0;
    388                msg[8] = save_x;
    389          
    390                msg[9] = 0x0;
    391                msg[10] = save_y;
    392                msg[11] = save_type;
    393            }*/
    394            
    395          
    396          }
    397          
    398          /****************************************************************
    399          *Function   :  ui_put_map_point_info
    400          *Author     :  lyh    
    401          *Date       :  2017.6.30
    402          *Description:  保存实时地图路径数据
    403          *CallBy     :  由底层调用，把实时的地图路径数据上传到应用层
    404          *Input      :  参数
    405          *              x: X 坐标
    406                         y: Y 坐标
    407                         type:    当前点的类型 范围是1-3 
    408                                  1:走过的无障碍点
    409                                  2:有障碍的点
    410                                  3:当前点
    411                         direction:机器角度
    412          *             
    413          *Output     :  无
    414          *Return     :  无
    415          *Others     :  
    416          *History    : //修改历史
    417              <author>       <time>      <version>           <desc>
    418              lyh            17.6.30       v1.0         build this function
    419          ******************************************************************/
    420          void ui_put_map_point_info(uint16_t x, uint16_t y, uint8_t type, uint16_t direction)
    421          {
    422              uint8_t i;
    423              real_map_points_t * real_map_points;
    424              real_map_points = &map_points_data;
    425              if(type == 3)
    426              {
    427                  type_three_ok = 1;
    428              }
    429              if (real_map_points->count >= MAP_POINT_BUFFER_SIZE) {
    430                  for (i=0; i<MAP_POINT_BUFFER_SIZE-1; i++) {
    431                      real_map_points->points[i].x = real_map_points->points[i+1].x;
    432                      real_map_points->points[i].y = real_map_points->points[i+1].y;
    433                      real_map_points->points[i].type = real_map_points->points[i+1].type;
    434                  }
    435                  real_map_points->count = MAP_POINT_BUFFER_SIZE;
    436              } else {
    437                  real_map_points->count++;
    438              }
    439              real_map_points->points[real_map_points->count-1].x = x;
    440              real_map_points->points[real_map_points->count-1].y = y;
    441              real_map_points->points[real_map_points->count-1].type = type;
    442              if (type == MAP_POINT_TYPE_CURRENT) {
    443                real_map_points->direction = direction;
    444              }
    445          }
    446          
    447          void send_config_network_cmd(void)
    448          {
    449             U8 msg[2]={0x01,0x01}; 
    450             send_pack(CMD_CONFIG_NETWORK, msg, 2);
    451           // send_pack(CMD_WIFI_STATE, msg, 0);
    452             send_config_cmd = 1;
    453             recive_connect_cmd_ok = 0;
    454          }
    455          
    456          void send_wifi_song_mute(void)
    457          {
    458             U8 msg[2]={0x02,0x01}; 
    459             send_pack(CMD_CONFIG_NETWORK, msg, 2);
    460          }
    461          void send_wifi_song_unmute(void)
    462          {
    463             U8 msg[2]={0x02,0x00}; 
    464             send_pack(CMD_CONFIG_NETWORK, msg, 2);
    465          }
    466          void send_wifi_test_result(void)
    467          {
    468              U8 msg[1]={1};
    469              send_pack(CMD_ENTER_TEST, msg, 1);    
    470          }
    471          
    472          U16 get_uart_cmd(void)
    473          {
    474            static U16 tmp;
    475            tmp = uart_cmd;
    476            uart_cmd = 0x0;
    477            return tmp;
    478          }
    479          
    480          void clear_map_index(void)
    481          {
    482              map_index = 0;
    483          }
    484          
    485          #endif
    486          


 

 


Errors: none
Warnings: none
