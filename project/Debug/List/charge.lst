###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:27
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\charge\charge.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\charge\charge.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  F:\海尔\新版+8k解码+预约\project\Debug\List\charge.lst
#    Object file  =  F:\海尔\新版+8k解码+预约\project\Debug\Obj\charge.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\charge\charge.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          /*edit by lyy*/
      6          #include "charge.h"
      7          #include "syscall_api.h"
      8          #include "util/current.h"
      9          #include "am_date_base.h"
     10          #include "ui-song-player.h"
     11          #include "am_config_macro.h"
     12          
     13          CHARGING_STATE_ERROR_E charging_error;
     14          CHARGING_STATE_ERROR_E charging_record_error;
     15          
     16          u32 charge_stop_cnt;
     17          u16 charge_neg_cnt;
     18          u32 charging_start_recover_minutes;
     19          u32 charging_start_full_minutes;
     20          u32 charging_trickle_timeout;
     21          u32 charging_trickle_ticks;
     22          u32 charging_start_complete_minutes;
     23          u16 charging_vol_count;
     24          u32 charging_trickle_on_counts;
     25          u32 charging_on_counts;
     26          u16 charging_trickle_off_counts;
     27          u16 g_comlete_charging;
     28          u16 charging_state;
     29          u16 trickle_charging_time = 0;
     30          u16 charging_current_setpoint;
     31          u16 before_charging_volt;
     32          u8  charge_overflow;
     33          u8  detect_debund;
     34          u8  comlete_charged;
     35          u8  charging_last;
     36          u8  charge_detect_cnt;
     37          
     38          const u16 charging_voltage_max_allowed = CHARGING_MAXVOL;
     39          
     40          #define PURLING_TIME  100*5*60 /*开始充电时，涓流充电时间*/
     41          #define MAX_VOLT      0xffff
     42          
     43          s16  g_static_voltage = MAX_VOLT;
     44          
     45          extern const IO_PIN_CFG io_table[];
     46          
     47          /****************************************************************
     48          *Function   :  convert_to_voltage
     49          *Author     :  lyy    
     50          *Date       :  2017.4.20
     51          *Description:  把电压adc值转成电压（单位mv）
     52          *CallBy     :  
     53          *Input      :  参数
     54          *              v_adc ： 电压的adc
     55          *Output     :  无
     56          *Return     :  无
     57          *Others     :  
     58          *History    : //修改历史
     59              <author>       <time>      <version>           <desc>
     60              lyy            17.4.28       v1.0         build this function
     61          ******************************************************************/
     62          s16 convert_to_voltage( s16 v_adc) 
     63          {
     64            s32 mv= 18333*v_adc;//3.3*1000/0.18=18333,0.18由硬件参数决定
     65            mv = (mv>>12);
     66            return (s16)mv;
     67          }
     68          
     69          /****************************************************************
     70          *Function   :  convert_to_current
     71          *Author     :  lyy    
     72          *Date       :  2017.4.20
     73          *Description:  把电流adc值转成电压（单位mA）
     74          *CallBy     :  
     75          *Input      :  参数
     76          *              v_adc ： 电流的adc
     77          *Output     :  无
     78          *Return     :  无
     79          *Others     :  
     80          *History    : //修改历史
     81              <author>       <time>      <version>           <desc>
     82              lyy            17.4.28       v1.0         build this function
     83          ******************************************************************/
     84          s16 convert_to_current( s16 c_adc) 
     85          {
     86            s16 ret =  (s16)(((0.95 - c_adc*3.3/4096.0f)/0.41)*1000);
     87            return ret;
     88          }
     89          
     90          /****************************************************************
     91          *Function   :  charging_print
     92          *Author     :  lyy    
     93          *Date       :  2017.4.20
     94          *Description:  打印充电过程信息（电压，电流，充电状态）
     95          *CallBy     :  一般在充电流程
     96          *Input      :  无
     97          *Output     :  无
     98          *Return     :  无
     99          *Others     :  可以在本地实现同样功能函数
    100          *History    : //修改历史
    101              <author>       <time>      <version>           <desc>
    102              lyy            17.4.28       v1.0         build this function
    103          ******************************************************************/
    104          void charging_print(void)
    105          {
    106            static u32 one_second=0;
    107            
    108            if(get_total_seconds()>(one_second+10))
    109            {
    110              one_second = get_total_seconds();
    111              int16_t adc=get_adc_chan_val( ADC_CHAN_BATTERY_CURRENT );                   
    112              float current = (950 - ((adc*3300)/4096))/0.41f;
    113           
    114              printf("battery_valtage=%d\r\n",convert_to_voltage(battery_voltage_average()));
    115              printf("charging state:%d",get_ui_manager()->charging_state());//charging_state);
    116              printf(" v:%d c:%d mA t:%d\n",battery_voltage_average(),(int)current,battery_temperature_average());
    117          
    118              
    119            }
    120          }
    121          
    122          /****************************************************************
    123          *Function   :  charging_init
    124          *Author     :  lyy
    125          *Date       :  2017.4.20
    126          *Description:  初始化充电参数
    127          *CallBy     :  任何地方，中断除外
    128          *Input      :  无
    129          *Output     :  无
    130          *Return     :  无
    131          *Others     :  
    132          *History    : //修改历史
    133              <author>       <time>      <version>           <desc>
    134              lyy            17.4.28       v1.0         build this function
    135          ******************************************************************/
    136          void charging_init(void)
    137          {
    138            charging_start_recover_minutes = 0;
    139            charging_trickle_timeout = 0;
    140            charging_start_full_minutes = 0;
    141            charging_error = CHARGING_NONE;
    142            charging_state = CHARGING_OFF;
    143            charging_vol_count = 0;
    144            g_comlete_charging = 0;
    145            trickle_charging_time = 0;
    146            set_charge_voltage(CHARGING_MAXVOL);
    147            set_adaptor_output_voltage(ADAPTER_OUTPUT_VOL);
    148          }
    149          
    150          /****************************************************************
    151          *Function   :  charging_state_get
    152          *Author     :  lyy
    153          *Date       :  2017.4.20
    154          *Description:  获取充电状态
    155          *CallBy     :  任何地方，目前这个接口是必须实现，因为注册给SDK使用
    156          *Input      :  无
    157          *Output     :  无
    158          *Return     :  返回 charging_state： 充电状态
    159          *Others     :  
    160          *History    : //修改历史
    161              <author>       <time>      <version>           <desc>
    162              lyy            17.4.28       v1.0         build this function
    163          ******************************************************************/
    164          u16 charging_state_get(void)
    165          {
    166            return charging_state;
    167          }
    168          
    169          
    170          /****************************************************************
    171          *Function   :  charge_current_get
    172          *Author     :  lyy    
    173          *Date       :  2017.4.20
    174          *Description:  获取当前实际的充电电流 (单位：mA)
    175          *CallBy     :  任何地方，中断上下文除外
    176          *Input      :  参数
    177          *Output     :  无
    178          *Return     :  返回 实际的充电电流值 (mA)
    179          *Others     :  
    180          *History    : //修改历史
    181              <author>       <time>      <version>           <desc>
    182              lyy            17.4.28       v1.0         build this function
    183          ******************************************************************/
    184          S16 charge_current_get(void)
    185          {
    186              return convert_to_current(get_adc_chan_val( ADC_CHAN_BATTERY_CURRENT ));   
    187          }
    188          
    189          /****************************************************************
    190          *Function   :  get_charge_stop_current
    191          *Author     :  lyy
    192          *Date       :  2017.4.20
    193          *Description:  获取是否已经充电完毕
    194          *CallBy     :  任何地方，中断除外
    195          *Input      :  无
    196          *Output     :  无
    197          *Return     :  返回 1： 充满电   0：未充满
    198          *Others     :  
    199          *History    : //修改历史
    200              <author>       <time>      <version>           <desc>
    201              lyy            17.4.28       v1.0         build this function
    202          ******************************************************************/
    203          static S8 get_charge_stop_current(void)
    204          {
    205            if(charge_current_get() <= 200)
    206            {
    207              charge_stop_cnt++;
    208            }
    209            else
    210            {
    211              if(charge_stop_cnt>0)
    212                charge_stop_cnt--;
    213            }
    214            if(charge_stop_cnt > 120000)//if low current charge for 20min,  complete it
    215            {
    216              return 1;
    217            }
    218            ///////////////////////////////
    219            if(charge_current_get() < 0)
    220            {
    221              charge_neg_cnt++;
    222            }
    223            else
    224            {
    225              if(charge_neg_cnt>0)
    226                charge_neg_cnt--;
    227            }
    228            
    229            if(charge_neg_cnt > 6000)//60s is neg continue
    230            {
    231              return -1;
    232            }
    233            
    234            return 0;
    235          }
    236          
    237          
    238          /****************************************************************
    239          *Function   :  reset_charge_stop_current
    240          *Author     :  lyy
    241          *Date       :  2017.4.20
    242          *Description:  恢复判断充电是否满的状态
    243          *CallBy     :  任何地方
    244          *Input      :  无
    245          *Output     :  无
    246          *Return     :  无
    247          *Others     :  
    248          *History    : //修改历史
    249              <author>       <time>      <version>           <desc>
    250              lyy            17.4.28       v1.0         build this function
    251          ******************************************************************/
    252          static void reset_charge_stop_current(void)
    253          {
    254            charge_stop_cnt = 0;
    255            charge_neg_cnt  = 0;
    256          }
    257          
    258          /****************************************************************
    259          *Function   :  go_into_trickle_charging
    260          *Author     :  lyy
    261          *Date       :  2017.4.20
    262          *Description:  进入涓流充电模式
    263          *CallBy     :  任何地方，中断除外
    264          *Input      :  无
    265          *Output     :  无
    266          *Return     :  无
    267          *Others     :  
    268          *History    : //修改历史
    269              <author>       <time>      <version>           <desc>
    270              lyy            17.4.28       v1.0         build this function
    271          ******************************************************************/
    272          static void go_into_trickle_charging(void)
    273          {
    274            v_ref_init();
    275            set_charging_enable(1);//close charging
    276            set_charge_current(450);
    277            charging_start_full_minutes = get_total_seconds()/60;
    278            charging_start_recover_minutes = get_total_seconds()/60;        
    279            charging_state = CHARGING_PURLING;//进入涓流重新充电  
    280          }
    281          
    282          /****************************************************************
    283          *Function   :  process_charging
    284          *Author     :  lyy
    285          *Date       :  2017.4.20
    286          *Description:  充电控制流程
    287          *CallBy     :  目前是给SDK调用
    288          *Input      :  无
    289          *Output     :  无
    290          *Return     :  无
    291          *Others     :  
    292          *History    : //修改历史
    293              <author>       <time>      <version>           <desc>
    294              lyy            17.4.28       v1.0         build this function
    295          ******************************************************************/
    296          static u8 begin_charge_report = 0;
    297          static int play_song_cnt = 0;
    298          static u8 play_song_flag = 0;
    299          void process_charging(void)
    300          {
    301            //充电过程控制
    302            
    303            if(!begin_charge_report)
    304            {
    305              play_song_cnt++;
    306              if( (play_song_cnt > 200) && (!play_song_flag) )//2s后报语音
    307              {
    308                if( sys_runing_mode_get()==ROBOT_STATE_CHARGING) 
    309                {
    310                  songplayer_play_id(SONG_ID_CHARGING_START, 0);
    311                  begin_charge_report = 1;
    312                  play_song_flag = 1;
    313                }
    314              }       
    315            }
    316            
    317            if(before_charging_volt == 0)
    318            {
    319                before_charging_volt = battery_voltage_average();
    320                printf("before volt = %d \r\n",before_charging_volt);
    321            }  
    322            
    323            {
    324              if(check_battery_voltage(charging_voltage_max_allowed+100)) 
    325              {
    326                charging_state = CHARGING_OFF;
    327                g_comlete_charging = 1;
    328                set_charging_enable(0);//close charging
    329                charging_print();
    330                return;
    331              }
    332              
    333              //这里的作用只是给ui的状态
    334              if(g_comlete_charging)
    335              {
    336                if(check_battery_voltage((charging_voltage_max_allowed-15)))
    337                {
    338                  set_charging_enable(0);
    339                  charging_state = CHARGING_COMPLETE;//充满
    340                  comlete_charged = 1;
    341                  charging_print();
    342                  return;
    343                }
    344                else if(check_battery_voltage((charging_voltage_max_allowed-30)))
    345                {
    346                  g_comlete_charging = 0;
    347                  go_into_trickle_charging();
    348                }
    349                else
    350                {
    351                  charging_state = CHARGING_OFF;
    352                  g_comlete_charging = 0;
    353                }
    354              }
    355              else 
    356              {
    357                if( (before_charging_volt > (g_static_voltage-15)) && (before_charging_volt >(charging_voltage_max_allowed-25)) )//如果之前是充满过，但是被马上拉开放回来，这个时候应该是已充满的状态充
    358                {
    359                  g_static_voltage = MAX_VOLT;
    360                  go_into_trickle_charging();
    361                  comlete_charged = 1;
    362                }
    363              }
    364          
    365              if(trickle_charging_time < PURLING_TIME)
    366              {
    367                trickle_charging_time++;
    368              }
    369          
    370              charging_print();
    371              switch(charging_state)
    372              {
    373              case CHARGING_OFF:
    374                charging_vol_count = 0;
    375                comlete_charged   = 0;
    376                charging_start_full_minutes = get_total_seconds()/60;
    377                charging_start_recover_minutes = get_total_seconds()/60;
    378                v_ref_init();
    379          //      if(check_battery_available()) //电池是否可用，比如温度是否过高，是否有插入电池
    380          //      {
    381          //        charging_error = CHARGING_NOBATTERY;
    382          //        charging_record_error = CHARGING_NOBATTERY;
    383          //      }
    384          //      else 
    385                if (!(check_battery_voltage(CHARGING_RECOVERYVOL)))
    386                {
    387                  charging_state = CHARGING_RECOVERY;
    388                  set_charging_enable(1);//close charging
    389                  set_charge_current(450);
    390                  charging_trickle_on_counts = get_total_seconds(); 
    391                }
    392                else
    393                {
    394                  charging_state = CHARGING_ON;
    395                  set_charging_enable(1);//close charging
    396                  set_charge_current(450);
    397                  charging_on_counts = get_sum_ticks();
    398                  charging_trickle_on_counts = get_total_seconds();			  
    399                }
    400                break;
    401              case CHARGING_RECOVERY:
    402                //300ma charging
    403                charging_current_setpoint = 300;
    404                set_charge_current(charging_current_setpoint);
    405                if(check_battery_voltage(CHARGING_RECOVERYVOL))
    406                {
    407                  charging_state = CHARGING_ON;
    408                }
    409                if(((get_total_seconds()/60)-charging_start_recover_minutes)>CHARGING_TIME_RECOVERY_MINUTES)
    410                {
    411                  charging_start_complete_minutes = get_total_seconds()/60;
    412                  charging_state = CHARGING_COMPLETE;
    413                  comlete_charged = 1;
    414                }
    415          	  			
    416                break;
    417              case CHARGING_ON:
    418                {
    419                  //1000ma
    420                  if(trickle_charging_time < PURLING_TIME)
    421                  {
    422                    charging_current_setpoint = 220;//0.1C 充电
    423                  }
    424                  else
    425                  {
    426                    charging_current_setpoint = 500;//800;
    427                  }
    428                  set_charge_current(charging_current_setpoint);
    429                  if((charge_maybe_full()  && (get_charge_stop_current() > 0)) || (get_charge_stop_current()<0))//current < 250ma && voltage >= 16.8v
    430                  {            
    431                      charge_overflow = 1;
    432                  }
    433                    
    434                  if(charge_overflow)//如果电压大于最大允许值
    435                  {
    436                    charge_overflow = 0;
    437                    reset_charge_stop_current();
    438                    charging_trickle_timeout = get_total_seconds()/60; //记录开始值
    439                    charging_trickle_ticks = get_sum_ticks();
    440                    charging_state = CHARGING_COMPLETE;//CHARGING_PURLING;
    441                    comlete_charged = 1;
    442                  }
    443                  else
    444                  {
    445                    ;//set_charging_enable(1);
    446                  }
    447                  //vol max
    448                  if(((get_total_seconds()/60)-charging_start_full_minutes)>CHARGING_TIME_ALLOW_MINUTES)
    449                  {
    450                    charging_start_complete_minutes = get_total_seconds()/60;
    451                    charging_state = CHARGING_COMPLETE;
    452                    comlete_charged = 1;
    453                  }
    454                }
    455                break;
    456              case CHARGING_PURLING:
    457                //50ma
    458                if(trickle_charging_time < PURLING_TIME)
    459                {
    460                  charging_current_setpoint = 220;//0.1C 充电
    461                }
    462                else   
    463                {
    464                  charging_current_setpoint = 500;//800;
    465                }
    466                
    467                if((charge_maybe_full()  && (get_charge_stop_current()>0)) || (get_charge_stop_current()<0))//current < 300ma && voltage >= 16.8v
    468                {     
    469                  charge_overflow = 1;
    470                }
    471                
    472                if(charge_overflow)//如果电压大于最大允许值
    473                {
    474                  charge_overflow = 0;
    475                  comlete_charged = 1;
    476                  reset_charge_stop_current();           
    477                  charging_state = CHARGING_COMPLETE;
    478                }
    479                else
    480                {
    481                  ;
    482                }
    483                
    484                if(((get_total_seconds()/60)-charging_start_full_minutes)>CHARGING_TIME_PURLING_MINUTES)
    485                {
    486                    charging_start_complete_minutes = get_total_seconds()/60;
    487                    charging_state = CHARGING_COMPLETE;
    488                }      
    489          
    490                break;
    491              case CHARGING_WAITING:
    492                break;
    493              case CHARGING_COMPLETE:
    494                g_comlete_charging = 1;
    495                break;
    496              }
    497            }
    498             
    499          }
    500          
    501          
    502          /****************************************************************
    503          *Function   :  process_charging
    504          *Author     :  lyy
    505          *Date       :  2017.4.20
    506          *Description:  退出充电控制流程
    507          *CallBy     :  目前是给SDK调用
    508          *Input      :  无
    509          *Output     :  无
    510          *Return     :  无
    511          *Others     :  
    512          *History    : //修改历史
    513              <author>       <time>      <version>           <desc>
    514              lyy            17.4.28       v1.0         build this function
    515          ******************************************************************/
    516          void quit_charging(void)
    517          {
    518            begin_charge_report  = 0;
    519            before_charging_volt = 0;
    520            play_song_cnt = 0;
    521            play_song_flag = 0;
    522            if(comlete_charged)
    523            {
    524              g_static_voltage = battery_voltage_average();
    525              printf("after volt:%d\r\n",g_static_voltage);
    526              comlete_charged  = 0;
    527            }
    528            else
    529            {
    530              g_static_voltage = MAX_VOLT;
    531            }
    532            
    533          }
    534          
    535          /****************************************************************
    536          *Function   :  charging_jack
    537          *Author     :  lyy
    538          *Date       :  2017.4.20
    539          *Description:  检查是否插入适配器
    540          *CallBy     :  任何地方
    541          *Input      :  无
    542          *Output     :  无
    543          *Return     :  1：充电器插入 0：无
    544          *Others     :  
    545          *History    : //修改历史
    546              <author>       <time>      <version>           <desc>
    547              lyy            17.4.28       v1.0         build this function
    548          ******************************************************************/
    549          U16 charging_jack(void)
    550          {
    551            return (gpio_get_value(IO_CHARGER_HIGH)==0);  
    552          }
    553          
    554          /****************************************************************
    555          *Function   :  charging_dock
    556          *Author     :  lyy
    557          *Date       :  2017.4.20
    558          *Description:  检查是否在充电座上
    559          *CallBy     :  任何地方
    560          *Input      :  无
    561          *Output     :  无
    562          *Return     :  1：充电器插入 0：无
    563          *Others     :  
    564          *History    : //修改历史
    565              <author>       <time>      <version>           <desc>
    566              lyy            17.4.28       v1.0         build this function
    567          ******************************************************************/
    568          U16 charging_dock(void)
    569          {
    570            return (gpio_get_value(IO_CHARGER_LOW)==0);
    571          }
    572          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   charge_current_get
         0   -> convert_to_current
         8   -> get_adc_chan_val
       8   charging_dock
         8   -- Indirect call
       8   charging_init
         0   -> set_adaptor_output_voltage
         8   -> set_charge_voltage
       8   charging_jack
         8   -- Indirect call
      24   charging_print
        24   -- Indirect call
        24   -> __aeabi_f2iz
        24   -> __aeabi_fdiv
        24   -> __aeabi_i2f
        24   -> battery_temperature_average
        24   -> battery_voltage_average
        24   -> convert_to_voltage
        24   -> get_adc_chan_val
        24   -> get_total_seconds
        24   -> get_ui_manager
       0   charging_state_get
       8   convert_to_current
         8   -> __aeabi_d2iz
         8   -> __aeabi_ddiv
         8   -> __aeabi_dmul
         8   -> __aeabi_dsub
         8   -> __aeabi_i2d
       0   convert_to_voltage
       8   get_charge_stop_current
         8   -> charge_current_get
       8   go_into_trickle_charging
         8   -> get_total_seconds
         8   -> set_charge_current
         8   -> set_charging_enable
         8   -> v_ref_init
      16   process_charging
        16   -- Indirect call
        16   -> battery_voltage_average
        16   -> charge_maybe_full
         0   -> charging_print
        16   -> charging_print
        16   -> check_battery_voltage
        16   -> get_charge_stop_current
        16   -> get_sum_ticks
        16   -> get_total_seconds
        16   -> go_into_trickle_charging
        16   -> reset_charge_stop_current
        16   -> set_charge_current
        16   -> set_charging_enable
        16   -> songplayer_play_id
        16   -> v_ref_init
       8   quit_charging
         8   -- Indirect call
         8   -> battery_voltage_average
       0   reset_charge_stop_current


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
      10  ?Subroutine0
      12  ?Subroutine1
       8  ?Subroutine2
      14  ?Subroutine3
       8  ?Subroutine4
      24  ?_0
      20  ?_1
      20  ?_2
      20  ?_3
      16  ?_4
      16  charge_current_get
       1  charge_detect_cnt
       8  charge_neg_cnt
          charge_stop_cnt
      18  charging_dock
      52  charging_error
          charge_overflow
          comlete_charged
          begin_charge_report
          play_song_flag
          charging_vol_count
          g_comlete_charging
          charging_state
          trickle_charging_time
          charging_current_setpoint
          before_charging_volt
          g_static_voltage
          charging_start_recover_minutes
          charging_start_full_minutes
          charging_trickle_timeout
          charging_trickle_ticks
          charging_start_complete_minutes
          charging_trickle_on_counts
          charging_on_counts
          play_song_cnt
      40  charging_init
      12  charging_jack
       1  charging_last
     144  charging_print
       1  charging_record_error
       6  charging_state_get
       2  charging_trickle_off_counts
       2  charging_voltage_max_allowed
      74  convert_to_current
      12  convert_to_voltage
       1  detect_debund
      76  get_charge_stop_current
      38  go_into_trickle_charging
       4  one_second
     526  process_charging
      52  quit_charging
      10  reset_charge_stop_current

 
    18 bytes in section .bss
    52 bytes in section .data
     2 bytes in section .rodata
 1 224 bytes in section .text
 
 1 224 bytes of CODE  memory
     2 bytes of CONST memory
    70 bytes of DATA  memory

Errors: none
Warnings: none
