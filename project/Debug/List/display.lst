###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:27
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\local_process\display.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\local_process\display.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  F:\海尔\新版+8k解码+预约\project\Debug\List\display.lst
#    Object file  =  F:\海尔\新版+8k解码+预约\project\Debug\Obj\display.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\local_process\display.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          #include <ui-config.h>
      6          #include "ui-commands.h"
      7          #include "am_date_base.h"
      8          #include "am_config_macro.h"
      9          #include "time.h"
     10          #include "lib.h"
     11          #include  <am_config_macro.h>
     12          #include "local_key_check.h"
     13          #include "remote.h"
     14          #include "act.h"
     15          #include "display.h"
     16          #include "syscall_api.h"
     17          #include "led_drv.h"
     18          #include "charge/charge.h"
     19          
     20          U8 display_power_up_flag = 0;           /*上电显示标志*/
     21          U8 last_flush_state = 0;                /*灯闪烁状态*/
     22          static sys_state_info sys_state_info_p; /*系统状态*/
     23          extern U8 wifi_led;
     24          int led_gpio_group[LED_GPIO_NUM]=
     25          {
     26            AM_I0_CLEAN_LED  ,
     27            AM_I0_DOCK_LED   ,
     28            AM_I0_SPOT_LED    
     29          };
     30          
     31          /****************************************************************
     32          *Function   :  ui_handle_sleep
     33          *Description:  发送sys_power后，系统的回调函数  
     34          *Input      :  handle_time
     35          *Output     :  无
     36          *Return     :  无
     37          *Others     :  
     38          ******************************************************************/
     39          void ui_handle_sleep(u8 handle_time)
     40          {
     41            U8 sleep_state = get_enter_sleep_state();
     42            if(handle_time == 1)
     43            {
     44              //if(sleep_state == SLEEP_MODE_S1)
     45              {
     46                set_led(ALL_LED);
     47              }
     48            }
     49            
     50          }
     51          
     52          //static power_ctrl_t sleep_funcs = {
     53           // .sleep = ui_handle_sleep,
     54          //  .wake  = NULL,
     55          //};
     56          
     57          /****************************************************************
     58          *Function   :  display_gpio_init
     59          *Description:  申请显示需要的IO  
     60          *Input      :  无
     61          *Output     :  无
     62          *Return     :  无
     63          *Others     :  
     64          ******************************************************************/
     65          U8 display_gpio_init(void)
     66          {
     67            int ret = -1;
     68            for( int i=0; i<LED_GPIO_NUM; i++ )
     69            {
     70              ret = gpio_request_one(led_gpio_group[i],GPIO_F_DIR_OUT|GPIO_F_INIT_LOW);
     71              
     72              if(ret != -1)
     73              {
     74                ;
     75              }
     76              else
     77              {
     78                printf("display io not ok\r\n");
     79              }
     80            }  
     81            return 0;
     82          }
     83          
     84          /****************************************************************
     85          *Function   :  _display_init
     86          *Description:  显示初始化  
     87          *Input      :  无
     88          *Output     :  无
     89          *Return     :  无
     90          *Others     :  
     91          ******************************************************************/
     92          void _display_init(void)
     93          {
     94            //set_power_callback(&sleep_funcs);   
     95            display_gpio_init();
     96          #ifdef USE_SPI_DISPLAY
     97            led_drv_init(); 
     98          #endif
     99          }
    100          
    101          /****************************************************************
    102          *Function   :  _display_exit
    103          *Description:  显示退出  
    104          *Input      :  无
    105          *Output     :  无
    106          *Return     :  无
    107          *Others     :  
    108          ******************************************************************/
    109          void _display_exit(void)
    110          {
    111            ;
    112          }
    113          
    114          /****************************************************************
    115          *Function   :  set_led
    116          *Description:  点亮某个颜色的灯  
    117          *Input      :  led_id：需要点亮的那个灯
    118          *Output     :  无
    119          *Return     :  无
    120          *Others     :  
    121          ******************************************************************/
    122          void set_led(U8 led_id)
    123          {
    124            switch(led_id)
    125            {
    126            case CLEAN_LED:
    127              {
    128                gpio_set_value(AM_I0_CLEAN_LED, 1);
    129              }
    130              break;
    131            case DOCK_LED:
    132              {
    133                gpio_set_value(AM_I0_DOCK_LED,1);
    134              }
    135              break;
    136            case SPOT_LED:
    137              {
    138                gpio_set_value(AM_I0_SPOT_LED,1);
    139                //gpio_set_value(AM_I0_CLEAN_LED,1);
    140              }
    141              break;
    142            case ALL_LED:
    143              {
    144                gpio_set_value(AM_I0_CLEAN_LED,1);
    145                gpio_set_value(AM_I0_DOCK_LED,1);
    146                gpio_set_value(AM_I0_SPOT_LED,1);
    147              }     
    148              break;
    149            }
    150          }
    151          
    152          
    153          /****************************************************************
    154          *Function   :  reset_led
    155          *Description:  熄灭某个颜色的灯  
    156          *Input      :  led_id：需要熄灭的那个灯
    157          *Output     :  无
    158          *Return     :  无
    159          *Others     :  
    160          ******************************************************************/
    161          void reset_led(U8 led_id)
    162          {
    163            switch(led_id)
    164            {
    165            case CLEAN_LED:
    166              {
    167                gpio_set_value(AM_I0_CLEAN_LED,0);
    168              }
    169              break;
    170            case DOCK_LED:
    171              {
    172                gpio_set_value(AM_I0_DOCK_LED,0);
    173              }
    174              break;
    175            case SPOT_LED:
    176              {
    177                gpio_set_value(AM_I0_SPOT_LED,0);
    178              }
    179              break;
    180            case ALL_LED:
    181              {
    182                gpio_set_value(AM_I0_CLEAN_LED,0);
    183                gpio_set_value(AM_I0_DOCK_LED,0);
    184                gpio_set_value(AM_I0_SPOT_LED,0);
    185              }
    186              break;
    187              
    188            }
    189          }
    190          
    191          /****************************************************************
    192          *Function   :  display_power_up
    193          *Description:  开机时的显示  
    194          *Input      :  无
    195          *Output     :  无
    196          *Return     :  无
    197          *Others     :  
    198          ******************************************************************/
    199          void display_power_up(void)
    200          {
    201            static U8 time_cnt = 0;
    202            static U8 display_step = 5;
    203            
    204            if(time_cnt > 0)
    205            {
    206              time_cnt--;
    207              if(time_cnt == 0)
    208              {
    209                //AM_DEBUG_INFO("display_step=%d\r\n",display_step);
    210                if(++display_step >= 7)
    211                {
    212                  display_power_up_flag = 0;
    213                }
    214              }
    215            }
    216            //printf("display_step=%d\r\n",display_step);
    217            switch(display_step)
    218            {
    219            case 0:
    220              reset_led(ALL_LED);  
    221              set_led(DOCK_LED); 
    222              if(time_cnt == 0)
    223                time_cnt = FAST_TIME;
    224              break;
    225            case 1:
    226              reset_led(ALL_LED);  
    227              //set_led(SPOT_LED); 
    228              set_led(CLEAN_LED); 
    229              if(time_cnt == 0)
    230                time_cnt = SLOW_TIME;
    231              break;
    232            case 2:
    233              reset_led(ALL_LED);  
    234              //set_led(CLEAN_LED); 
    235              set_led(DOCK_LED); 
    236              if(time_cnt == 0)
    237                time_cnt = SLOW_TIME;
    238              break;
    239            case 3:
    240              reset_led(ALL_LED);  
    241              //set_led(DOCK_LED); 
    242              set_led(CLEAN_LED); 
    243              if(time_cnt == 0)
    244                time_cnt = SLOW_TIME;
    245              break; 
    246            case 4:
    247              reset_led(ALL_LED);  
    248              set_led(DOCK_LED); 
    249              set_led(SPOT_LED); 
    250              if(time_cnt == 0)
    251                time_cnt = SLOW_TIME;
    252              break; 
    253            case 5:
    254              reset_led(ALL_LED);  
    255              set_led(CLEAN_LED); 
    256              set_led(SPOT_LED); 
    257              if(time_cnt == 0)
    258                time_cnt = SLOW_TIME+20;
    259              break; 
    260            case 6:
    261              reset_led(ALL_LED);  
    262              set_led(ALL_LED);  
    263              if(time_cnt == 0)
    264                time_cnt = SLOW_TIME;
    265              break;
    266              
    267            }
    268          }
    269          
    270          void display_wifi_led(void)
    271          {
    272            static U8 time_cnt = 0;
    273            static U8 display_step = 0;
    274            
    275            if(time_cnt > 0)
    276            {
    277              time_cnt--;
    278              if(time_cnt == 0)
    279              {
    280                //AM_DEBUG_INFO("display_step=%d\r\n",display_step);
    281                if(++display_step >= 6)
    282                {
    283                  wifi_led = 0;
    284                  gpio_set_value(AM_I0_WIFI_LED, 1); 
    285                }
    286              }
    287            }
    288            //printf("display_step=%d\r\n",display_step);
    289            switch(display_step)
    290            {
    291            case 0:
    292            case 2:
    293            case 4:
    294               gpio_set_value(AM_I0_WIFI_LED, 1); 
    295              if(time_cnt == 0)
    296                time_cnt = FAST_TIME;
    297              break;
    298            case 1:
    299            case 3:
    300            case 5:
    301              gpio_set_value(AM_I0_WIFI_LED, 0);  
    302           
    303              if(time_cnt == 0)
    304                time_cnt = SLOW_TIME;
    305              break;
    306              
    307            }
    308          }
    309          
    310          
    311          /****************************************************************
    312          *Function   :  display_testing
    313          *Description:  UI状态为UI_TEST时的显示  
    314          *Input      :  无
    315          *Output     :  无
    316          *Return     :  无
    317          *Others     :  
    318          ******************************************************************/
    319          void display_testing(void)
    320          {
    321          	if (get_test_result() != 0)
    322            {
    323            	set_led(GREEN_LED);
    324            }
    325            else
    326            {
    327            	set_led(RED_LED);
    328            }
    329          }
    330          
    331          /****************************************************************
    332          *Function   :  display_routine
    333          *Description:  显示处理函数，根据UI和系统的不同状态作相应的处理
    334          *Input      :  无
    335          *Output     :  无
    336          *Return     :  无
    337          *Others     :  
    338          ******************************************************************/
    339          void display_routine(void)
    340          {  
    341            static int led_flash_cnt = 0;	 
    342            
    343            UI_STATE_E s = get_ui_state();
    344            U8 sleep_state = get_enter_sleep_state();
    345            sys_info_get(SYS_STATE_INFO, (long )&sys_state_info_p);
    346            if((sys_state_info_p.robot_state != ROBOT_STATE_WAITING)&&(display_power_up_flag == 1))
    347            {
    348              display_power_up_flag = 0;
    349            }
    350            
    351            if(display_power_up_flag == 1)
    352            {
    353              display_power_up();
    354              return;
    355            }
    356            
    357            led_flash_cnt++;
    358              
    359            reset_led(ALL_LED); 
    360            
    361            if(wifi_led==1)
    362            {
    363              display_wifi_led();   
    364              //return;
    365            }
    366            if (s == UI_TEST)
    367            {
    368            	display_testing();
    369              return;
    370            }
    371            else if(s == UI_ENTER_SLEEPING)
    372            {
    373              return;
    374            }
    375            else if (s == UI_ERROR)
    376            {
    377              set_led(RED_LED);
    378              return;
    379            }  
    380           // printf("display_routine=%d\r\n",sys_state_info_p.robot_state);
    381            switch(sys_state_info_p.robot_state)
    382            {
    383              
    384            case ROBOT_STATE_WAITING:
    385              { 
    386                //set_led(ALL_LED);
    387                set_led(GREEN_LED);
    388              }
    389              break;
    390            case ROBOT_STATE_REMOTE_DRIVE:
    391            case ROBOT_STATE_CLEANING_ROOM:
    392              {
    393                if(sys_state_info_p.flush_state)
    394                {
    395                  if(last_flush_state == 0)
    396                    led_flash_cnt = HALF_LED_FLASH_TIME + 1;
    397                  if(led_flash_cnt>HALF_LED_FLASH_TIME)
    398                  {
    399                    set_led(GREEN_LED);
    400                   // set_led(ALL_LED); 
    401                  }
    402                }
    403                else if(sys_state_info_p.dock_state == 1)
    404                {
    405                  //set_led(ORANGE_LED); 
    406                 // printf("set_led(ORANGE_LED\r\n");
    407                }
    408                else
    409                {
    410                  set_led(GREEN_LED);
    411                  //printf("set_led set_led GREEN_LED\r\n");        
    412                }
    413              }
    414              break;
    415              
    416            case ROBOT_STATE_SPOTTING:
    417            case ROBOT_STATE_WALLFOLLOW:
    418              {
    419                set_led(GREEN_LED);
    420              }
    421              break;
    422              
    423            case ROBOT_STATE_TESTING:
    424              {
    425                set_led(ALL_LED);
    426              }
    427              break;  
    428            case ROBOT_STATE_CHARGING:
    429              {
    430               // printf("charging_state=%d\r\n,sys_state_info_p.charging_state");
    431                if(sys_state_info_p.charging_state == CHARGING_ON)
    432                {
    433                  if(led_flash_cnt>HALF_LED_FLASH_TIME)
    434                  {
    435                    //set_led(ORANGE_LED); 
    436                    set_led(GREEN_LED);
    437                  }
    438                }
    439                else if (sys_state_info_p.charging_state == CHARGING_COMPLETE)
    440                {
    441                  //printf("sys_state_info_p.charging_state == CHARGING_COMPLETE\r\n");
    442                set_led(GREEN_LED);
    443                }
    444                else 
    445                {
    446                  //set_led(GREEN_LED);
    447                  set_led(ALL_LED);
    448                }
    449              }
    450              break;         
    451            case ROBOT_STATE_PAUSE:
    452              if(led_flash_cnt>HALF_LED_FLASH_TIME)
    453              {
    454                //set_led(ORANGE_LED);   
    455                set_led(GREEN_LED);
    456              }
    457              break;
    458            default:
    459              set_led(ALL_LED);  
    460              break;
    461              
    462            }
    463            
    464            if(led_flash_cnt > LED_FLASH_TIME)
    465              led_flash_cnt = 0;
    466            
    467            last_flush_state = sys_state_info_p.flush_state;
    468            
    469          }
    470          
    471          /****************************************************************
    472          *Function   :  set_display_power_up_flag
    473          *Description:  设置开机显示状态标志
    474          *Input      :  是否开机状态
    475          *Output     :  无
    476          *Return     :  无
    477          *Others     :  
    478          ******************************************************************/
    479          void set_display_power_up_flag(U8 state)
    480          {
    481            display_power_up_flag = state;
    482          }
    483          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   _display_exit
       0   _display_init
         0   -> display_gpio_init
      24   display_gpio_init
        24   -- Indirect call
       8   display_power_up
         8   -> reset_led
         8   -> set_led
      16   display_routine
         0   -> display_power_up
         0   -> display_testing
        16   -> get_enter_sleep_state
        16   -> get_ui_state
        16   -> reset_led
         0   -> set_led
        16   -> set_led
        16   -> sys_info_get
       8   display_testing
         8   -> get_test_result
         0   -> set_led
      16   display_wifi_led
        16   -- Indirect call
       8   reset_led
         0   -- Indirect call
         8   -- Indirect call
       0   set_display_power_up_flag
       8   set_led
         0   -- Indirect call
         8   -- Indirect call
       8   ui_handle_sleep
         8   -> get_enter_sleep_state
         0   -> set_led


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
      10  ?Subroutine0
       4  ?Subroutine1
      20  ?_0
       2  _display_exit
       2  _display_init
      48  display_gpio_init
     142  display_power_up
     204  display_routine
      20  display_testing
     100  display_wifi_led
      12  led_gpio_group
      62  reset_led
       6  set_display_power_up_flag
      62  set_led
      24  sys_state_info_p
          display_power_up_flag
          last_flush_state
          time_cnt
          display_step
          led_flash_cnt
       2  time_cnt
          display_step
      22  ui_handle_sleep

 
   2 bytes in section .bss
  36 bytes in section .data
 724 bytes in section .text
 
 724 bytes of CODE memory
  38 bytes of DATA memory

Errors: none
Warnings: none
