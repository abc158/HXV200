###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:28
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\ui-manager\exception.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\ui-manager\exception.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  F:\海尔\新版+8k解码+预约\project\Debug\List\exception.lst
#    Object file  =  F:\海尔\新版+8k解码+预约\project\Debug\Obj\exception.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\ui-manager\exception.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          #include "syscall_api.h"
      6          #include "am_date_base.h"
      7          #include "am_robot_type.h"
      8          #include "am_config_macro.h"
      9          #include "act.h"
     10          #include "lib.h"
     11          #include "ui-commands.h"
     12          #include "ui-song-player.h"
     13          #include "motor/robot_brush.h"
     14          
     15          #define MAIN_BRUSH_CURRENT_HIGHT_TIMEOUT 600
     16          #define SIDE_BRUSH_CURRENT_HIGHT_TIMEOUT 200
     17          #define VAC_CURRENT_HIGHT_TIMEOUT        300 //3s
     18          #define WHEEL_DROP_TIMEOUT               3000
     19          #define BUMPER_BUMP_TIMEOUT              600  //6s
     20          #define NOT_BUSTBIN_TIMEOUT             1000 //10s
     21          #define STASIS_STALL_TIMEOUT            15000 //150s
     22          #define CHECK_TIME                      4000 //40s
     23          
     24          #define PLAY_ERROR_INTERVAL 1000 //10s
     25          
     26          static uint16_t main_brush_current_over_count = 0;          /*主刷电流异常计数*/
     27          static uint16_t side_brush_current_over_count = 0;          /*边刷电流异常计数*/
     28          static uint16_t vac_current_over_count = 0;                 /*真空异常计数*/
     29          static uint16_t vac_current_null_count = 0;                 /*真空异常计数*/
     30          static uint16_t bumper_bump_count = 0;                      /*检测到碰撞发生的计数*/
     31          static UI_ERROR_NUMBERS_E g_error_id = UI_ERROR_00_REVERSE; /*错误号*/
     32          static sys_state_info sys_state_info_p;                     /*系统状态*/
     33          static u16 play_err_cnt = 0;                                /*播放故障提示的时间间隔计数*/
     34          static u16 play_err_num = 0;                                /*故障提示的次数*/
     35          static u8 side_brush_stop = 0;                              /*边刷是否停住*/
     36          static u32 sb_stop_start_time;                         /*边刷停止转动的开始时间*/
     37          static u16 stop_act_cnt = 0;
     38          extern u8 robot_is_maybe_not_bustbin(void);
     39          
     40          void set_ui_error_number(UI_ERROR_NUMBERS_E id)
     41          {
     42            g_error_id = id;
     43          }
     44          
     45          UI_ERROR_NUMBERS_E get_ui_error_num(void)
     46          {
     47          	return g_error_id;
     48          }
     49          
     50          void clear_ui_error_number(void)
     51          {
     52            g_error_id = UI_ERROR_00_REVERSE;
     53          }
     54          
     55          u8 main_brush_current_is_stall(void)
     56          {
     57            return (get_adc_chan_val(ADC_CHAN_MAIN_BRUSH_CURRENT) > MAIN_BRUSH_TWINE_CURRENT);
     58          }
     59          
     60          u8 side_brush_current_is_stall(void)
     61          {
     62            return (get_adc_chan_val(ADC_CHAN_SIDE_BRUSH_CURRENT) > SIDE_BRUSH_TWINE_CURRENT);
     63          }
     64          
     65          u8 vaccum_is_maybe_stall(void)
     66          {
     67            return (get_adc_chan_val(ADC_CHAN_VAC_CURENT) > 1000);
     68          }
     69          
     70          /****************************************************************
     71          *Function   :  check_cliff_alwayon
     72          *Description:  判断是否一直检测到悬崖  
     73          *Input      :  无
     74          *Output     :  无
     75          *Return     :  无
     76          *Others     :  
     77          ******************************************************************/
     78          static void check_cliff_alwayon(void)
     79          {
     80            static u32 cliff_front_right  = 0;
     81            static u32 cliff_front_left   = 0;
     82            static u32 cliff_side_right   = 0;
     83            static u32 cliff_side_left    = 0;
     84            static u32 cliff_error        = 0;
     85            int flag = 0;
     86            
     87            if(get_cliff_state() & CLIFF_FRONT_RIGHT)
     88            {
     89              cliff_front_right++;
     90              
     91              if(cliff_front_right > CHECK_TIME)
     92              {
     93                flag++;
     94              }
     95            }
     96            else
     97            {
     98              cliff_front_right = 0;
     99            }
    100            
    101            if(get_cliff_state() & CLIFF_FRONT_LEFT)
    102            {
    103              cliff_front_left++;
    104              if(cliff_front_left > CHECK_TIME)
    105              {
    106                flag++;
    107              }
    108            }
    109            else
    110            {
    111              cliff_front_left = 0;
    112            }
    113            
    114            if(get_cliff_state() & CLIFF_SIDE_RIGHT)
    115            {
    116              cliff_side_right++;
    117              if(cliff_side_right > CHECK_TIME)
    118              {
    119                flag++;
    120              }
    121            }
    122            else
    123            {
    124              cliff_side_right=0;
    125            }
    126            
    127            if(get_cliff_state() & CLIFF_SIDE_LEFT)
    128            {
    129              cliff_side_left++;
    130              if(cliff_side_left > CHECK_TIME)
    131              {
    132                flag++;
    133              }
    134            }
    135            else
    136            {
    137              cliff_side_left=0;
    138            }
    139            
    140            if( (flag < 4) && (flag > 0) )
    141            {
    142              set_ui_error_number(UI_ERROR_12_CLIFF_ERROR);
    143              cliff_error=1;
    144            }
    145            else if(cliff_error)
    146            {
    147              clear_ui_error_number();
    148              cliff_error = 0;
    149            }
    150            else
    151            {
    152              cliff_error = 0;
    153            }
    154          }
    155          
    156          /****************************************************************
    157          *Function   :  sys_exception_monitor
    158          *Description:  机器故障的检测函数  
    159          *Input      :  无
    160          *Output     :  无
    161          *Return     :  无
    162          *Others     :  
    163          ******************************************************************/
    164          void sys_exception_monitor(void)
    165          {
    166            static u32 delay = 0;
    167            static uint8_t  begin_to_check = 0;
    168          
    169            sys_info_get(SYS_STATE_INFO, (long )&sys_state_info_p);
    170            
    171            if(!IS_CLEANNING_MODE(sys_state_info_p.robot_state))
    172            {
    173              delay = 0;
    174              begin_to_check = 0;
    175              main_brush_current_over_count = 0;
    176              side_brush_current_over_count = 0;
    177              vac_current_null_count = 0;
    178              vac_current_over_count = 0;
    179              bumper_bump_count = 0;
    180          
    181              return;
    182            }
    183            else
    184            {
    185              delay++;
    186              if(delay >= 300) // after 3s
    187              {
    188                delay = 0;
    189                begin_to_check = 1;
    190              }
    191            }
    192            
    193            if(!begin_to_check)
    194            {
    195              return;
    196            }
    197            
    198            check_cliff_alwayon();
    199            
    200            //主刷被缠住
    201            if ( (main_brush_current_is_stall())) {
    202              main_brush_current_over_count += 1;
    203              if (main_brush_current_over_count > MAIN_BRUSH_CURRENT_HIGHT_TIMEOUT) {
    204                set_ui_error_number(UI_ERROR_02_MAIN_BRUSH_ENTWINED);
    205              }
    206            } else {
    207              main_brush_current_over_count = 0;
    208            }
    209            //边刷被缠住
    210            if (side_brush_current_is_stall()) {
    211              side_brush_current_over_count += 1;
    212              //printf("side_brush_current_over_count=%d\r\n",side_brush_current_over_count);
    213              if (side_brush_current_over_count > SIDE_BRUSH_CURRENT_HIGHT_TIMEOUT) {
    214                robot_sidebrush_vols_set(0);
    215                sb_stop_start_time = timer_ms();
    216                side_brush_stop = 1;
    217              }
    218            } else {
    219              side_brush_current_over_count = 0;
    220              if ( (side_brush_stop == 1) && ( timer_elapsed(sb_stop_start_time) > 5000) )
    221              {
    222                robot_sidebrush_vols_set(SIDE_BRUSH_MAX_VOLTAGE);
    223                side_brush_stop = 0;
    224              }
    225            }
    226            //真空被堵住
    227            if(vaccum_is_maybe_stall())
    228            {
    229              vac_current_over_count++;
    230              if (vac_current_over_count > VAC_CURRENT_HIGHT_TIMEOUT) {
    231                set_ui_error_number(UI_ERROR_15_VACCUM_MOTO_ENTWINED);
    232              }
    233            }else {
    234              vac_current_over_count = 0;
    235            }
    236            //没装入垃圾盒？
    237            if(robot_is_maybe_not_bustbin())
    238            {
    239              //printf("bustbin=%d\r\n",robot_is_maybe_not_bustbin());
    240              vac_current_null_count++;
    241              if (vac_current_null_count >= NOT_BUSTBIN_TIMEOUT) {
    242                set_ui_error_number(UI_ERROR_10_DUSTBIN_UN_INSERT);
    243              }
    244            }else {
    245              vac_current_null_count = 0;
    246            }
    247          #if 1//luyanjin 
    248            //没装入垃圾盒？
    249            if(gpio_get_value(AM_IO_BUSTBIN_DETECT))
    250            {
    251              printf("bustbin=%d\r\n",gpio_get_value(AM_IO_BUSTBIN_DETECT));
    252              vac_current_null_count++;
    253              if (vac_current_null_count >= 5) {
    254                set_ui_error_number(UI_ERROR_10_DUSTBIN_UN_INSERT);
    255              }
    256            }else {
    257              vac_current_null_count = 0;
    258            }
    259          #endif
    260            //碰撞档板故障
    261            if(robot_bump_mask()!=BUMP_MASK_NONE)
    262            {
    263              bumper_bump_count++;
    264              if (bumper_bump_count > BUMPER_BUMP_TIMEOUT) {
    265                set_ui_error_number(UI_ERROR_09_BUMP_ERROR);
    266              }
    267            }else {
    268              bumper_bump_count=0;
    269            }  
    270          }
    271          
    272          /****************************************************************
    273          *Function   :  exception_handle
    274          *Description:  机器故障的处理函数  
    275          *Input      :  无
    276          *Output     :  无
    277          *Return     :  无
    278          *Others     :  
    279          ******************************************************************/
    280          void exception_handle(void)
    281          {
    282            UI_ERROR_NUMBERS_E t_error;
    283             
    284            t_error = get_ui_error_num();
    285            
    286            if (t_error != UI_ERROR_00_REVERSE)
    287            { 
    288            	if (IS_CLEANNING_MODE(sys_state_info_p.robot_state))
    289            	{
    290            	  set_ui_state(UI_ERROR);
    291                if(stop_act_cnt == 0)
    292                {
    293            	      act_command_q(CMD_CLEAN, CMD_STOP, NULL, 0);
    294                    stop_act_cnt = 50;
    295                }
    296            	  play_err_cnt = PLAY_ERROR_INTERVAL - 5;  	  
    297            	}  	
    298              if(stop_act_cnt > 0)
    299                stop_act_cnt--;
    300            	play_err_cnt++;
    301            	if (play_err_cnt >= PLAY_ERROR_INTERVAL)
    302            	{	
    303            		play_err_cnt = 0;
    304                songplayer_play_id(VOICE_ID_ERROR_00_REVERSE+t_error, 0);
    305                play_err_num++;
    306              }
    307            }
    308            else
    309            {
    310               stop_act_cnt = 0;
    311            }
    312          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   clear_ui_error_number
      16   exception_handle
        16   -> act_command_q
        16   -> set_ui_state
        16   -> songplayer_play_id
       0   get_ui_error_num
       8   main_brush_current_is_stall
         8   -> get_adc_chan_val
       0   set_ui_error_number
       8   side_brush_current_is_stall
         8   -> get_adc_chan_val
      16   sys_exception_monitor
        16   -- Indirect call
        16   -> get_cliff_state
        16   -> main_brush_current_is_stall
        16   -> robot_bump_mask
        16   -> robot_is_maybe_not_bustbin
        16   -> robot_sidebrush_vols_set
        16   -> side_brush_current_is_stall
        16   -> sys_info_get
        16   -> timer_elapsed
        16   -> timer_ms
        16   -> vaccum_is_maybe_stall
       8   vaccum_is_maybe_stall
         8   -> get_adc_chan_val


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
      16  ?_0
       8  clear_ui_error_number
     102  exception_handle
      64  g_error_id
          side_brush_stop
          begin_to_check
          sys_state_info_p
          main_brush_current_over_count
          side_brush_current_over_count
          vac_current_over_count
          vac_current_null_count
          bumper_bump_count
          play_err_cnt
          play_err_num
          stop_act_cnt
          sb_stop_start_time
          cliff_front_right
          cliff_front_left
          cliff_side_right
          cliff_side_left
          cliff_error
          delay
       6  get_ui_error_num
      22  main_brush_current_is_stall
       6  set_ui_error_number
      22  side_brush_current_is_stall
     408  sys_exception_monitor
      22  vaccum_is_maybe_stall

 
  64 bytes in section .bss
 624 bytes in section .text
 
 624 bytes of CODE memory
  64 bytes of DATA memory

Errors: none
Warnings: 1
