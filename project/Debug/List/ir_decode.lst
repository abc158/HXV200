###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\ui-manager\ir_decode.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\ui-manager\ir_decode.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  F:\海尔\新版+8k解码+预约\project\Debug\List\ir_decode.lst
#    Object file  =  F:\海尔\新版+8k解码+预约\project\Debug\Obj\ir_decode.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\ui-manager\ir_decode.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          #include "ui-ir.h"
      6          
      7          #define REMOTE_RESYNC_TICKS 14
      8          #define REMOTE_START_BIT_TICK 3
      9          #define REMOTE_DATA_BIT_TICK 7
     10          #define REMOTE_STOP_BIT_TICK 14
     11          #define REMOTE_BIT_TIMEOUT_TICK 18
     12          #define REMOTE_BYTE_STOP_TICKS 8
     13          #define REMOTE_STOP_BIT_MIN_TICKS 2
     14          
     15          
     16          REMOTE_DECODE remote_decode[REMOTE_DECODER_MAX];
     17          
     18          void remote_resync_init( REMOTE_DECODE *decode_p )
     19          {
     20            decode_p->state = REMOTE_RESYNC;
     21            decode_p->timer = 0;
     22          }
     23          
     24          void remote_byte_start_wait_init( REMOTE_DECODE *decode_p )
     25          {
     26            decode_p->state = REMOTE_BYTE_START_WAIT;
     27          }
     28          
     29          void remote_start_bit_init( REMOTE_DECODE *decode_p )
     30          {
     31            decode_p->state = REMOTE_START_BIT;
     32            decode_p->timer = 0;
     33          }
     34          
     35          void remote_data_bit_init( REMOTE_DECODE *decode_p )
     36          {
     37            decode_p->state = REMOTE_DATA_BIT;
     38            decode_p->count = 0;
     39          }
     40          
     41          void remote_stop_bit_wait_init( REMOTE_DECODE *decode_p )
     42          {
     43            decode_p->state = REMOTE_STOP_BIT_WAIT;
     44          }
     45          
     46          void remote_stop_bit_init( REMOTE_DECODE *decode_p )
     47          {
     48            decode_p->state = REMOTE_STOP_BIT;
     49            decode_p->count = 0;
     50            decode_p->timer = 0;
     51          }
     52          
     53          void remote_start_bit_wait_init( REMOTE_DECODE *decode_p )
     54          {
     55            decode_p->state = REMOTE_START_BIT_WAIT;
     56          }
     57          
     58          void remote_byte_stop_wait_init( REMOTE_DECODE *decode_p )
     59          {
     60            decode_p->state = REMOTE_BYTE_STOP_WAIT;
     61            decode_p->timer = 0;
     62          }
     63          
     64          /****************************************************************
     65          *Function   :  remote_decode_init
     66          *Description:  获取接收头接收到遥控器的数据 
     67          *Input      :  u16 instance:接收头ID            
     68          *Output     :  无
     69          *Return     :  -1,出错 0正确
     70          *Others     :  
     71          ******************************************************************/
     72          u16 remote_decode_init( u16 instance )
     73          {
     74           	
     75            REMOTE_DECODE *decode_p;
     76          
     77            if (instance >= REMOTE_DECODER_MAX)
     78            {
     79              return(-1);
     80            }
     81            decode_p = &remote_decode[instance];
     82          
     83            remote_resync_init(decode_p);
     84          
     85            return(0);
     86             
     87          }
     88          
     89          /****************************************************************
     90          *Function   :  remote_decode_ir
     91          *Description:  获取接收头接收到遥控器的数据 
     92          *Input      :  u16 instance:接收头ID   
     93          *              u16 ir_state:接收头采集到的电平
     94          *Output     :  无
     95          *Return     :  -1:未解出正确的编码 0:解出正确的编码
     96          *Others     :  此处红外的编码方式是"1"为高电平持续3ms,低电平持续1ms
     97                                             "0"为高电平持续1ms,低电平持续3ms
     98          ******************************************************************/
     99          U8 time_set_buf[IR_DECODER_MAX][5];
    100          int16_t remote_decode_ir( u16 instance,
    101                                     u16 ir_state )
    102          {
    103           
    104            REMOTE_DECODE *decode_p;
    105            int16_t     remoteStatus = 0;
    106            
    107          
    108            if (instance >= REMOTE_DECODER_MAX)
    109            {
    110              return(-1);
    111            }
    112            decode_p = &remote_decode[instance];
    113          
    114          
    115            decode_p->timer++;
    116          
    117            switch (decode_p->state)
    118            {
    119            case REMOTE_RESYNC:   
    120              if (ir_state)
    121              {
    122                decode_p->count++;
    123              }
    124              if((decode_p->count==0)&&(!ir_state))
    125              {
    126                remote_resync_init(decode_p);
    127                break;
    128              }
    129              if (((decode_p->timer>=decode_p->count)&&(decode_p->timer<=decode_p->count+4))&&(decode_p->count>=20)&&(decode_p->count<=26))
    130              {
    131                  decode_p->count=0;
    132                  decode_p->timer=0;
    133                  remote_byte_start_wait_init(decode_p);  
    134              }
    135              else if(decode_p->timer>=(decode_p->count+4))
    136                 { 
    137                    decode_p->count=0;
    138                    decode_p->timer=0;
    139                    remote_resync_init(decode_p);
    140                } 
    141          //    if (!ir_state)            
    142          //    {     
    143          //      count++;  
    144          //    }    
    145          //    if(count>=4)
    146          //    {
    147          //       count=0;
    148          //       decode_p->count=0;    
    149          //       remote_resync_init(decode_p);  
    150          //    }
    151          //     else     
    152          //     {    
    153          //       decode_p->count++;    
    154          //     }    
    155          //         
    156          //     if (decode_p->count>=20)    
    157          //     {       
    158          //             
    159          //         decode_p->count=0;    
    160          //         decode_p->timer=0;    
    161          //         remote_byte_start_wait_init(decode_p);    
    162          //      }        
    163          //   if (!ir_state)            
    164          //   { 
    165          //        decode_p->count=0;
    166          //        remote_resync_init(decode_p);
    167          //    }
    168          //    else 
    169          //    {
    170          //      decode_p->count++;
    171          //    }
    172          //    
    173          //    if (decode_p->count>=20)
    174          //    {   
    175          //        
    176          //        decode_p->count=0;
    177          //        decode_p->timer=0;
    178          //        remote_byte_start_wait_init(decode_p);
    179          //     }
    180              break;
    181              
    182            case REMOTE_BYTE_START_WAIT:   
    183              if (!ir_state)
    184              {
    185                decode_p->count++;
    186              }
    187              if((decode_p->count==0)&&ir_state)
    188              {
    189                decode_p->timer=0;
    190                break;
    191              }
    192              if (((decode_p->timer>=decode_p->count)&&(decode_p->timer<=decode_p->count+1))&&(decode_p->count>=20)&&(decode_p->count<=26))
    193              {
    194                  decode_p->count=0;
    195                  decode_p->timer=0;
    196                  remote_start_bit_init(decode_p);
    197              }
    198              else if(decode_p->timer>=(decode_p->count+1))
    199                 { 
    200                    decode_p->count=0;
    201                    decode_p->timer=0;
    202                    remote_resync_init(decode_p);
    203                }      
    204          //    else if (decode_p->timer!=decode_p->count)
    205          //     { 
    206          //        decode_p->count=0;
    207          //        decode_p->timer=0;
    208          //        remote_resync_init(decode_p);
    209          //    }
    210              break;
    211                
    212            case REMOTE_START_BIT:        //  ?°μ???íê3é
    213              if (ir_state)
    214              {
    215                decode_p->count++;
    216              }
    217                if((decode_p->count==0)&&(!ir_state))
    218              {
    219                decode_p->timer=0;
    220                break;
    221              }
    222              if(decode_p->count!=decode_p->timer)
    223              {
    224                  decode_p->count=0;
    225                  decode_p->timer=0;
    226                  remote_resync_init(decode_p);
    227              }
    228              //else if((decode_p->count==decode_p->timer) && (decode_p->count>=1) && (decode_p->count<=3))
    229              else if(((decode_p->timer>=decode_p->count)&&(decode_p->timer<=decode_p->count+1)) && (decode_p->count>=2) && (decode_p->count<=5))
    230              {
    231                 remote_data_bit_init(decode_p);
    232              }
    233              break;
    234              
    235            case REMOTE_DATA_BIT:
    236              if (!ir_state)
    237              {
    238                decode_p->count++;
    239              }
    240              if((decode_p->count==0)&&(ir_state))
    241              {
    242                decode_p->timer=0;
    243                break;
    244              }
    245          
    246              if(decode_p->count!=decode_p->timer)
    247              {
    248                   if(decode_p->timer>=decode_p->count+1)
    249                   {
    250                   decode_p->rxByte <<= 1;
    251                    switch (decode_p->count)
    252                    {
    253          //           case 0:
    254          //           case 1:
    255          //           case 2:
    256          //               decode_p->count=0;
    257          //               decode_p->timer=0;
    258          //               remote_resync_init(decode_p);
    259          //               break;
    260                    case 2:  
    261                    case 3:
    262                    case 4:
    263                    case 5:
    264                        remote_stop_bit_init(decode_p);
    265                        break;
    266          //           case 6: 
    267          //           case 7: 
    268          //           case 8: 
    269          //           case 9: 
    270          //           case 10: 
    271          //              decode_p->count=0;
    272          //              decode_p->timer=0;
    273          //              remote_resync_init(decode_p);
    274          //              break;
    275                     case 10:
    276                     case 11: 
    277                     case 12: 
    278                     case 13: 
    279                     case 14:
    280                     case 15:
    281                        decode_p->rxByte++;
    282                        remote_stop_bit_init(decode_p);
    283                        break;
    284                      default:
    285                        decode_p->count=0;
    286                        decode_p->timer=0;
    287                        remote_resync_init(decode_p);
    288                        break;
    289                    }
    290                   }
    291              }
    292              break;
    293          
    294            case REMOTE_STOP_BIT:
    295               if (ir_state)
    296              {
    297                decode_p->count++;
    298              }
    299               if((decode_p->count==0)&&(ir_state))
    300              {
    301                decode_p->timer=0;
    302                break;
    303              }
    304              if (decode_p->count > 0)
    305              {
    306                        decode_p->count=0;
    307                        decode_p->timer=0;
    308          	      decode_p->bitsDecoded++;
    309                          
    310          	      if (decode_p->bitsDecoded >= 8)
    311          	      {
    312                       
    313                          if((decode_p->rxByte==0xDD)&&(decode_p->REMOTE_signal!=2))
    314                          { 
    315                            decode_p->REMOTE_signal=1;
    316                            remote_data_bit_init(decode_p);
    317                            remoteStatus=0;
    318                          }
    319                          else if((decode_p->rxByte!=0xDD)&&(decode_p->REMOTE_signal!=2))
    320                          {
    321                            if(((decode_p->rxByte==0xC5)||(decode_p->rxByte==0xA6)||(decode_p->rxByte==0x59))&&(!decode_p->REMOTE_signal))
    322                              remoteStatus = 1;
    323                            else if((decode_p->rxByte==0x2D)&&(decode_p->REMOTE_signal == 1))
    324                            {  
    325                                decode_p->REMOTE_signal=2;  
    326                                remote_data_bit_init(decode_p);  
    327                                remoteStatus = 0;  
    328                            }  
    329                            else if((decode_p->rxByte!=0x2D)&&(decode_p->REMOTE_signal == 1))
    330                            {
    331                              remoteStatus = 2;
    332                            }
    333                            if(decode_p->REMOTE_signal!=2)
    334                            {
    335                              remote_resync_init(decode_p);
    336                              decode_p->REMOTE_signal=0;
    337                            }
    338          
    339                          }
    340                          else if((decode_p->REMOTE_signal==2))
    341                          {
    342                               decode_p->schedule_data_count++;
    343                               decode_p->schedule_data[decode_p->schedule_data_count-1]=decode_p->rxByte;
    344                               remote_data_bit_init(decode_p);
    345                               remoteStatus=0;
    346                               if(decode_p->schedule_data_count==3)
    347                               {
    348                                  decode_p->schedule_data_count=0;
    349                                  decode_p->REMOTE_signal=0;
    350                                  remote_resync_init(decode_p);
    351                                  remoteStatus=3;   
    352                               }
    353                          }
    354                          else
    355                          remoteStatus = 0;
    356                          decode_p->bitsDecoded=0;
    357          	       
    358          	      }
    359          	      else
    360          	      { 
    361          	        remote_data_bit_init(decode_p);
    362          	      }
    363                } 
    364              break;
    365              
    366            default:
    367              break;
    368            }
    369            
    370            return(remoteStatus);
    371             
    372          }
    373            
    374          
    375          
    376          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   remote_byte_start_wait_init
       0   remote_byte_stop_wait_init
       0   remote_data_bit_init
       8   remote_decode_init
         8   -> remote_resync_init
      16   remote_decode_ir
        16   -> remote_data_bit_init
        16   -> remote_resync_init
        16   -> remote_start_bit_init
        16   -> remote_stop_bit_init
       0   remote_resync_init
       0   remote_start_bit_init
       0   remote_start_bit_wait_init
       0   remote_stop_bit_init
       0   remote_stop_bit_wait_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       8  ?Subroutine0
       6  ?Subroutine1
       6  remote_byte_start_wait_init
       2  remote_byte_stop_wait_init
      10  remote_data_bit_init
      60  remote_decode
      28  remote_decode_init
     422  remote_decode_ir
       8  remote_resync_init
       4  remote_start_bit_init
       6  remote_start_bit_wait_init
      12  remote_stop_bit_init
       6  remote_stop_bit_wait_init
      32  time_set_buf

 
  92 bytes in section .bss
 522 bytes in section .text
 
 522 bytes of CODE memory
  92 bytes of DATA memory

Errors: none
Warnings: none
