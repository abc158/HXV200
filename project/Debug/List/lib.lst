###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\local_process\lib.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\local_process\lib.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  F:\海尔\新版+8k解码+预约\project\Debug\List\lib.lst
#    Object file  =  F:\海尔\新版+8k解码+预约\project\Debug\Obj\lib.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\local_process\lib.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          #include <ui-config.h>
      6          #include "am_date_base.h"
      7          #include "ui-commands.h"
      8          #include "am_config_macro.h"
      9          #include "syscall_api.h"
     10          #include "ui-song-player.h"
     11          #include "act.h"
     12          
     13          #include "state_view/state_view.h"
     14          
     15          /*命令结构的长度*/
     16          #define CMD_LEN  7
     17          
     18          U8 uart_send_buf[70];                      /*存放与系统通信的数据的数组*/
     19          schedule_time_info tmp_schedule_info;
     20          
     21          /*配置主板当前的时间*/
     22          static tm set_current_day;
     23          
     24          schedule_time_info obj_schedule_info_msg_t;
     25          
     26          extern u8 last_state;
     27          extern u8 direction_key_up_flag;
     28          extern u8 direction_key_pause;
     29          /****************************************************************
     30          *Function   :  act_command_q
     31          *Description:  发送命令  
     32          *Input      :  CONTROL_CMD_E ui_cmd 
     33          *              CMD_STATE_E cmd_state
     34          *              void *msg :数据存放的地址
     35          *              U16 msg_len:数据长度
     36          *Output     :  无
     37          *Return     :  无
     38          *Others     :  
     39          ******************************************************************/
     40          void act_command_q(U32 ui_cmd, U8 cmd_state, void *msg, U16 msg_len)
     41          {
     42            command   cmd; 
     43            cmd.cmd       =ui_cmd;
     44            cmd.cmd_type  = CONTROL_CMD;
     45            cmd.cmd_state = cmd_state;
     46            cmd.len = msg_len;
     47            
     48            view_CMD(ui_cmd,cmd_state);
     49            
     50            memcpy(uart_send_buf,&cmd,CMD_LEN);
     51            if(msg_len >0)
     52            {
     53              memcpy(uart_send_buf + CMD_LEN, (U8 *)msg, msg_len);    
     54            }
     55            act_ctrl_cmd(uart_send_buf);     
     56          }
     57          
     58          /*pack for a kind of data*/
     59          U32 send_schedule_cmd(void)
     60          { 
     61            schedule_time_info *msg = &obj_schedule_info_msg_t;
     62            U16 msg_len = sizeof(schedule_time_info);
     63            act_command_q((U32)CMD_SCHDULE, (U8)CMD_RUN, (void *)msg, msg_len);
     64            return (U32)CMD_SCHDULE;
     65          }
     66          
     67          U32 send_time_cmd(void)
     68          { 
     69            tm *msg = &set_current_day;
     70            U16 msg_len = sizeof(tm);
     71            act_command_q((U32)CMD_CLOCK, (U8)CMD_RUN, (void *)msg, msg_len);
     72            return (U32)CMD_CLOCK;
     73          }
     74          
     75          U32 send_sleep_time_cmd(void)
     76          { 
     77            tm *msg = &set_current_day;
     78            printf("week=%d,hour=%d,min=%d\r\n",set_current_day.week,set_current_day.hour,set_current_day.min);
     79            U16 msg_len = sizeof(tm);
     80            act_command_q((U32)CMD_TIMING, (U8)CMD_RUN, (void *)msg, msg_len);
     81            return (U32)CMD_TIMING;
     82          }
     83          
     84          U32 send_standby_cmd(void)
     85          {
     86            act_command_q((U32)CMD_POWER, (U8)CMD_RUN, (void *)NULL, 0);
     87            return (U32)CMD_POWER;    
     88          }
     89          
     90          /*get state info */
     91          tm *get_current_time(void)
     92          {
     93            return NULL;
     94          }
     95          
     96          schedule_time_info *get_schedule_info(void)
     97          {
     98            return &(obj_schedule_info_msg_t);
     99          }
    100          
    101          schedule_time_info *get_tmp_schedule_info(void)
    102          {
    103          
    104            return NULL;
    105          }
    106          
    107          void make_schedule_time(tm *t, bool en)
    108          {
    109            U8 bit = (0x1<< t->week);
    110            tmp_schedule_info.SCH_ENABLE.BYTE &= ~bit;
    111            bit = (en << t->week);
    112            tmp_schedule_info.SCH_ENABLE.BYTE |= bit;
    113            memcpy(&(tmp_schedule_info.t[t->week]),t,sizeof(tm));
    114          }
    115          
    116          void set_schedule_time(void)
    117          {
    118            memcpy(&(obj_schedule_info_msg_t),&(tmp_schedule_info),sizeof(schedule_time_info));    
    119          }
    120          
    121          void set_current_time(tm *t)
    122          {
    123            memcpy(&set_current_day, t, sizeof(tm));
    124          }
    125          
    126          
    127          u8 send_drive_cmd = 0;
    128          
    129          /****************************************************************
    130          *Function   :  send_forward_cmd
    131          *Description:  发送向前命令  
    132          *Input      :  CMD_STATE_E mode
    133          *Output     :  无
    134          *Return     :  无
    135          *Others     :  
    136          ******************************************************************/
    137          void send_forward_cmd(CMD_STATE_E mode)
    138          { 
    139            s16 msg[1];
    140            
    141            if (mode == CMD_RUN)
    142            {
    143            	if (send_drive_cmd == 0)
    144            	{
    145          	  if((last_state == ROBOT_STATE_DOCK) || (last_state == ROBOT_STATE_PAUSE))
    146          	  {
    147          	  		if(direction_key_pause != 1)
    148                          state_save_and_recover(0);	  
    149          	  }
    150          	  else
    151          	  {
    152          			act_command_q(CMD_PAUSE, CMD_STOP, NULL, 0);
    153          			direction_key_pause =1;
    154          	  		sleep(10); 	  
    155          	  }
    156                msg[0] = -1;//前进的距离，单位是cm，-1表示一直向前
    157                act_command_q(CMD_FORWARD, CMD_RUN, (void *)&msg[0], 2);
    158                send_drive_cmd = 1;
    159          	  direction_key_up_flag =0;
    160              }
    161            }
    162            else
    163            {	
    164          	act_command_q(CMD_FORWARD, CMD_STOP, NULL, 0);
    165          	direction_key_up_flag =1;
    166          	send_drive_cmd = 0;
    167            }
    168          }
    169          
    170          /****************************************************************
    171          *Function   :  send_forward_cmd
    172          *Description:  发送向后命令  
    173          *Input      :  CMD_STATE_E mode
    174          *Output     :  无
    175          *Return     :  无
    176          *Others     :  
    177          ******************************************************************/
    178          void send_backward_cmd(CMD_STATE_E mode)
    179          { 
    180            s16 msg[1];
    181            
    182            if (mode == CMD_RUN)
    183            {
    184            	if (send_drive_cmd == 0)
    185            	{
    186          	  if((last_state == ROBOT_STATE_DOCK) || (last_state == ROBOT_STATE_PAUSE))
    187          	  {
    188          	  		if(direction_key_pause != 1)
    189                          state_save_and_recover(0);	  
    190          	  }
    191          	  else
    192          	  {
    193          			act_command_q(CMD_PAUSE, CMD_STOP, NULL, 0);
    194          			direction_key_pause =1;
    195          	  		sleep(10); 	  
    196          	  } 
    197                msg[0] = -1;//后退的距离，单位是cm，-1表示一直向前
    198                act_command_q(CMD_BACK, CMD_RUN, (void *)&msg[0], 2);
    199                send_drive_cmd = 1;
    200          	  direction_key_up_flag =0;
    201              }
    202            }
    203            else
    204            {
    205          	act_command_q(CMD_BACK, CMD_STOP, NULL, 0);
    206          	direction_key_up_flag =1;
    207            	send_drive_cmd = 0;
    208            }
    209          }
    210          
    211          /****************************************************************
    212          *Function   :  send_left_cmd
    213          *Description:  发送向左命令  
    214          *Input      :  CMD_STATE_E mode
    215          *Output     :  无
    216          *Return     :  无
    217          *Others     :  
    218          ******************************************************************/
    219          void send_left_cmd(CMD_STATE_E mode)
    220          { 
    221            s16 msg[1];
    222            
    223            if (mode == CMD_RUN)
    224            {
    225            	if (send_drive_cmd == 0)
    226            	{
    227          	  if((last_state == ROBOT_STATE_DOCK) || (last_state == ROBOT_STATE_PAUSE))
    228          	  {
    229          	  		if(direction_key_pause != 1)
    230                          state_save_and_recover(0);	  
    231          	  }
    232          	  else
    233          	  {
    234          			act_command_q(CMD_PAUSE, CMD_STOP, NULL, 0);
    235          			direction_key_pause =1;
    236          	  		sleep(10); 	  
    237          	  }
    238                msg[0] = -1;//转动的角度，单位是度，-1表示一直转动
    239                act_command_q(CMD_LEFT, CMD_RUN, (void *)&msg[0], 2);
    240                send_drive_cmd = 1;
    241          	  direction_key_up_flag =0;
    242              }
    243            }
    244            else
    245            {
    246          	act_command_q(CMD_LEFT, CMD_STOP, NULL, 0);	
    247          	direction_key_up_flag =1;	  
    248            	send_drive_cmd = 0;
    249            }
    250          }
    251          
    252          /****************************************************************
    253          *Function   :  send_right_cmd
    254          *Description:  发送向右命令  
    255          *Input      :  CMD_STATE_E mode
    256          *Output     :  无
    257          *Return     :  无
    258          *Others     :  
    259          ******************************************************************/
    260          void send_right_cmd(CMD_STATE_E mode)
    261          { 
    262            s16 msg[1];
    263            
    264            if (mode == CMD_RUN)
    265            {
    266            	if (send_drive_cmd == 0)
    267            	{
    268          	  if((last_state == ROBOT_STATE_DOCK) || (last_state == ROBOT_STATE_PAUSE))
    269          	  {
    270          	  		if(direction_key_pause != 1)
    271                          state_save_and_recover(0);	  
    272          	  }
    273          	  else
    274          	  {
    275          			act_command_q(CMD_PAUSE, CMD_STOP, NULL, 0);
    276          			direction_key_pause =1;
    277          	  		sleep(10); 	  
    278          	  }
    279                msg[0] = -1;//转动的角度，单位是度，-1表示一直转动
    280                act_command_q(CMD_RIGHT, CMD_RUN, (void *)&msg[0], 2);
    281                send_drive_cmd = 1;
    282          	  direction_key_up_flag =0;
    283              }
    284            }
    285            else
    286            {
    287          	act_command_q(CMD_RIGHT, CMD_STOP, NULL, 0);
    288          	direction_key_up_flag =1;	
    289            	send_drive_cmd = 0;
    290            }
    291          }
    292          
    293          
    294          
    295          
    296          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   act_command_q
        24   -> __aeabi_memcpy
        24   -> __aeabi_memcpy4
        24   -> act_ctrl_cmd
        24   -> view_CMD
       0   get_current_time
       0   get_schedule_info
       0   get_tmp_schedule_info
      16   make_schedule_time
         0   -> __aeabi_memcpy
      24   send_backward_cmd
        24   -> act_command_q
        24   -> sleep
        24   -> state_save_and_recover
      24   send_forward_cmd
        24   -> act_command_q
        24   -> sleep
        24   -> state_save_and_recover
      24   send_left_cmd
        24   -> act_command_q
        24   -> sleep
        24   -> state_save_and_recover
      24   send_right_cmd
        24   -> act_command_q
        24   -> sleep
        24   -> state_save_and_recover
       8   send_schedule_cmd
         8   -> act_command_q
      16   send_sleep_time_cmd
        16   -- Indirect call
        16   -> act_command_q
       8   send_standby_cmd
         8   -> act_command_q
       8   send_time_cmd
         8   -> act_command_q
       0   set_current_time
         0   -> __aeabi_memcpy
       0   set_schedule_time
         0   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
      12  ?Subroutine0
      68  ?Subroutine1
      10  ?Subroutine2
      10  ?Subroutine3
      10  ?Subroutine4
       6  ?Subroutine5
      28  ?_0
      58  act_command_q
       4  get_current_time
       4  get_schedule_info
       4  get_tmp_schedule_info
      48  make_schedule_time
      36  send_backward_cmd
       1  send_drive_cmd
      36  send_forward_cmd
      36  send_left_cmd
      36  send_right_cmd
      10  send_schedule_cmd
      40  send_sleep_time_cmd
      10  send_standby_cmd
       8  send_time_cmd
       8  set_current_day
      10  set_current_time
      12  set_schedule_time
     120  tmp_schedule_info
          obj_schedule_info_msg_t
      72  uart_send_buf

 
 201 bytes in section .bss
 568 bytes in section .text
 
 568 bytes of CODE memory
 201 bytes of DATA memory

Errors: none
Warnings: none
