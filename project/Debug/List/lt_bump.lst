###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:30
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\sensor\lt_bump.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\sensor\lt_bump.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  F:\海尔\新版+8k解码+预约\project\Debug\List\lt_bump.lst
#    Object file  =  F:\海尔\新版+8k解码+预约\project\Debug\Obj\lt_bump.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\sensor\lt_bump.c
      1          #include "am_type.h"
      2          #include "sensor/sensor.h"
      3          #include "syscall_api.h"
      4          #include "am_config_macro.h"
      5          
      6          #define max(a,b) ((a)>(b)?(a):(b))
      7          
      8          #define TOUCH_RIGHT_MOVE 2
      9          
     10          #define TOUCH_BUMP_TRIGGER_TIME 120
     11          
     12          #define LIGHT_BUMP_DELAY_COUNT   4//5
     13          #define DOCK_LIGHT_TOUCH_THROD  30
     14          
     15          BOOLEAN touch_bump_onoff=FALSE;
     16          BOOLEAN tb_on_sig=FALSE;
     17          static u32 front_time_stp=0;
     18          
     19          /****************************************************************
     20          *Function   :  turn_off_touch_bump
     21          *Author     :  lyy    
     22          *Date       :  2017.4.20
     23          *Description:  关闭light touch bump功能
     24          *CallBy     :  任何地方，中断上下文除外
     25          *Input      :  无
     26          *Output     :  无
     27          *Return     :  无
     28          *Others     :  
     29          *History    : //修改历史
     30              <author>       <time>      <version>           <desc>
     31              lyy            17.4.28       v1.0         build this function
     32          ******************************************************************/
     33          void turn_off_touch_bump()
     34          {
     35            if(touch_bump_onoff==FALSE)
     36            {
     37            }
     38            touch_bump_onoff=TRUE;
     39          }
     40          
     41          /****************************************************************
     42          *Function   :  turn_on_touch_bump
     43          *Author     :  lyy    
     44          *Date       :  2017.4.20
     45          *Description:  打开light touch bump功能
     46          *CallBy     :  任何地方，中断上下文除外
     47          *Input      :  无
     48          *Output     :  无
     49          *Return     :  无
     50          *Others     :  
     51          *History    : //修改历史
     52              <author>       <time>      <version>           <desc>
     53              lyy            17.4.28       v1.0         build this function
     54          ******************************************************************/
     55          void turn_on_touch_bump()
     56          {
     57            if(touch_bump_onoff==TRUE)
     58            {
     59              front_time_stp=0;
     60            }
     61            touch_bump_onoff=FALSE;
     62          }
     63          
     64          
     65          /****************************************************************
     66          *Function   :  touch_bump_run
     67          *Author     :  lyy
     68          *Date       :  2017.4.20
     69          *Description:  计算是否产生lt bump
     70          *CallBy     :  提高给SDK调用，返回结果
     71          *Input      :  无
     72          *Output     :  无
     73          *Return     :  return value:
     74                      0: no bump
     75                      1: left bump
     76                      2: right bump
     77                      3: center bump
     78          *Others     :  
     79          *History    : //修改历史
     80              <author>       <time>      <version>           <desc>
     81              lyy            17.4.28       v1.0         build this function
     82          ******************************************************************/
     83          int touch_bump_run(void)
     84          {
     85            s16 value_cl;
     86            u16 value_cr;
     87            static s16 cl_array[2];
     88            static s16 cr_array[2];
     89          
     90            s16 value_fl;
     91            s16 value_fr;
     92            s16 value_center;
     93            u32 time_now;
     94            static u16 value_max=0;
     95            static u8 decay_count=0;
     96            static s16 c_array[2];
     97          
     98          
     99            static s16 cl_value_max=0;
    100            static u8 cl_decay_count=0;
    101            static u32 cl_time_stp=0;
    102          
    103            static s16 cr_value_max=0;
    104            static u8 cr_decay_count=0;
    105            static u32 cr_time_stp=0;
    106          
    107            int lt_bump=0;
    108          
    109            int TOTCH_BUMP_TIME_DELAY = 900;
    110          
    111            if(touch_bump_onoff)
    112            {
    113               return 0;
    114            }
    115            
    116            
    117            value_fl = robot_signal_distance(LT_FRONTLEFT)>>TOUCH_RIGHT_MOVE;
    118            value_fr = robot_signal_distance(LT_FRONTRIGHT)>>TOUCH_RIGHT_MOVE;
    119          
    120            time_now = timer_ms();
    121          
    122            {
    123              value_cl = robot_signal_distance(LT_CENTERLEFT)>>TOUCH_RIGHT_MOVE;
    124              value_cr = robot_signal_distance(LT_CENTERRIGHT)>>TOUCH_RIGHT_MOVE;
    125          
    126          
    127              value_cl=mid_filter(cl_array, value_cl);
    128              value_cr=mid_filter(cr_array, value_cr);
    129              
    130              
    131          #ifdef USE_LEFT_RIGHT_LT //用上左右两边的lt 做判断
    132              {
    133                value_l=robot_signal_distance(LT_LEFT)>>TOUCH_RIGHT_MOVE;
    134                value_r=robot_signal_distance(LT_RIGHT)>>TOUCH_RIGHT_MOVE;
    135                if(!(wall_follow_is_running()))
    136                {
    137                  if(value_l > lt_max_light_value*3)
    138                  {
    139                    value_cl += lt_max_light_value;
    140                  }
    141                  if(value_r > lt_max_light_value*3)
    142                  {
    143                    value_cr += lt_max_light_value;
    144                  }
    145                }
    146              }
    147          #endif
    148              
    149            }
    150          
    151            value_center = (value_fl + value_fr)>>1;
    152          
    153            value_center=mid_filter(c_array, value_center);
    154          
    155            //process the front touch bump
    156            if((value_center >= UI_SET_LT_BUMP_THROD) && (timer_elapsed(front_time_stp)>TOTCH_BUMP_TIME_DELAY))
    157            {
    158              //printf("value_center = %d\r\n",value_center);
    159              if((value_max < value_center) && (value_center<UI_SET_LT_MAX_LIGHT_VALUE))
    160              {
    161                value_max = value_center;
    162                decay_count=0;
    163              }
    164              else if(((value_max*7/8) > value_center) || (value_center>=UI_SET_LT_MAX_LIGHT_VALUE))
    165              {
    166                decay_count++;
    167                printf("decay_count = %d\r\n",decay_count,value_max);
    168                if(decay_count==LIGHT_BUMP_DELAY_COUNT)
    169                {
    170                  if(touch_bump_onoff==FALSE)
    171                  {
    172                      lt_bump=3;
    173                  }
    174                  front_time_stp = timer_ms();   //this is to delete multiple trigger
    175                }
    176              }
    177            }
    178            else
    179            {
    180              value_max=value_center;
    181              decay_count=0;
    182              tb_on_sig=FALSE;
    183            }
    184          
    185            {
    186              time_now = timer_ms();
    187          
    188              if((time_now-front_time_stp)>TOTCH_BUMP_TIME_DELAY)   //when the front is in trigger, don't trigger the other touch
    189              {
    190                //center left
    191                if((value_cl >= UI_SET_LT_BUMP_LEFT_RIGHT_THROD) && (timer_elapsed(cl_time_stp)>TOTCH_BUMP_TIME_DELAY))
    192                {
    193                  //printf("value_cl = %d\r\n",value_cl);
    194                  if(((cl_value_max < value_cl)) && (value_cl<UI_SET_LT_MAX_LIGHT_VALUE))// || ((cl_value_max + cl_value_max>>3) < value_cl))
    195                  {
    196                    cl_value_max = value_cl;
    197                    cl_decay_count=0;
    198                  }
    199                  else if((cl_value_max*7/8 > value_cl) || ((value_cl>=UI_SET_LT_MAX_LIGHT_VALUE)) || ((value_cl>=UI_SET_LT_MAX_LIGHT_VALUE*2)))
    200                  {
    201                    cl_decay_count++;
    202                    if((cl_decay_count==(LIGHT_BUMP_DELAY_COUNT+3)))// || (value_l>=DOCK_LIGHT_TOUCH_THROD)) )
    203                    {
    204                      if(touch_bump_onoff==FALSE)
    205                      {
    206                        lt_bump |= 1;
    207                      }
    208                      cl_time_stp = timer_ms();   //this is to delete multiple trigger
    209                    }
    210                  }
    211                  else
    212                  {
    213                    cl_value_max=value_cl;
    214                    cl_decay_count=0;
    215                  }
    216                }
    217                else
    218                {
    219                  cl_value_max=value_cl;
    220                  cl_decay_count=0;
    221                }
    222                //center right
    223                time_now = timer_ms();
    224                if((time_now-cl_time_stp)>TOTCH_BUMP_TIME_DELAY)   //to make sure there is only one touch bump is trigger
    225                {
    226                  if((value_cr >= UI_SET_LT_BUMP_LEFT_RIGHT_THROD) && (timer_elapsed(cr_time_stp)>TOTCH_BUMP_TIME_DELAY))
    227                  {
    228                   // printf("value_cr = %d\r\n",value_cr);
    229                    if(((cr_value_max <= value_cr) &&  (!wall_follow_is_running())) && (value_cr<UI_SET_LT_MAX_LIGHT_VALUE))// || ((cr_value_max + cr_value_max>>3) <= value_cr))
    230                    {
    231                      cr_value_max = value_cr;
    232                      cr_decay_count=0;
    233                    }
    234                    else if(((cr_value_max*7/8)>value_cr) || ((value_cr >= UI_SET_LT_MAX_LIGHT_VALUE)) || ((value_cr >= UI_SET_LT_MAX_LIGHT_VALUE*2)))
    235                    {
    236                      cr_decay_count++;
    237                      if(cr_decay_count==(LIGHT_BUMP_DELAY_COUNT+3))// || (value_r>=DOCK_LIGHT_TOUCH_THROD)))
    238                      {
    239                        if(touch_bump_onoff==FALSE)
    240                        {
    241                          lt_bump |=2;
    242                        }
    243                        cr_time_stp = timer_ms();   //this is to delete multiple trigger
    244                      }
    245                    }
    246                    else
    247                    {
    248                      cr_value_max=value_cr;
    249                      cr_decay_count=0;
    250                    }
    251                  }
    252                  else
    253                  {
    254                    cr_value_max=value_cr;
    255                    cr_decay_count=0;
    256                  }
    257                }
    258              }
    259          
    260            }
    261            return lt_bump;
    262          }
    263          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   touch_bump_run
        32   -- Indirect call
        32   -> mid_filter
        32   -> robot_signal_distance
        32   -> timer_elapsed
        32   -> timer_ms
        32   -> wall_follow_is_running
       0   turn_off_touch_bump
       0   turn_on_touch_bump


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
      12  ?Subroutine0
      20  ?_0
      36  touch_bump_onoff
          tb_on_sig
          decay_count
          cl_decay_count
          cr_decay_count
          value_max
          cl_value_max
          cr_value_max
          front_time_stp
          cl_time_stp
          cr_time_stp
          cl_array
          cr_array
          c_array
     402  touch_bump_run
       8  turn_off_touch_bump
      18  turn_on_touch_bump

 
  36 bytes in section .bss
 468 bytes in section .text
 
 468 bytes of CODE memory
  36 bytes of DATA memory

Errors: none
Warnings: none
