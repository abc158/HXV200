###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        25/Sep/2017  13:57:27
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\海尔\新版+8k解码+预约+去掉多余代码\src\ui-manager\remote_handle.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约+去掉多余代码\src\ui-manager\remote_handle.c
#        -lcN F:\海尔\新版+8k解码+预约+去掉多余代码\project\Debug\List\
#        --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\Debug\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\..\src\guardrail\ -Ohz
#    List file    =  
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\Debug\List\remote_handle.lst
#    Object file  =  
#        F:\海尔\新版+8k解码+预约+去掉多余代码\project\Debug\Obj\remote_handle.o
#
###############################################################################

F:\海尔\新版+8k解码+预约+去掉多余代码\src\ui-manager\remote_handle.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          #include "ui-config.h"
      6          #include "ui-ir.h"
      7          #include "syscall_api.h"
      8          
      9          U8 port_state[IR_DECODER_MAX][IR_QUEUE_LEN];      /*存放IO电平的队列*/
     10          U8 working_byte[IR_DECODER_MAX];                  /*存放采集到的IO电平,满8bit存入队列*/          
     11          U8 capture_counter[IR_DECODER_MAX];               /*采集IO电平的计数*/
     12          U8 current_ir_code = 0;                           /*遥控按键值*/
     13          U8 remote_timer = 0;                              /*接收到遥控按键的持续时间*/
     14          static U8 write_ptr[IR_DECODER_MAX];              /*队列的写入指针*/
     15          static U8 read_ptr[IR_DECODER_MAX];               /*队列的读取指针*/
     16          static U8 data_length[IR_DECODER_MAX];            /*队列里数据的长度*/
     17          static uint8_t ir_val[IR_DECODER_MAX]={0};        /*接收到的充电座的数据*/
     18          static uint8_t ir_val_test[IR_DECODER_MAX]={0};   /*接收到的红外数据*/
     19          
     20          extern REMOTE_DECODE remote_decode[];
     21          extern int16_t remote_decode_ir( u16 instance,  u16 ir_state );
     22          extern u16 remote_decode_init( u16 instance );
     23           
     24          
     25          int ir_gpio[IR_DECODER_MAX] = 
     26          {
     27            AM_IO_IR_REC_MIDDLE_LEFT,
     28            AM_IO_IR_REC_MIDDLE_RIGHT,
     29            AM_IO_IR_REC_LEFT,
     30            AM_IO_IR_REC_RIGHT,
     31            AM_IO_IR_REC_BACK_LEFT,
     32            AM_IO_IR_REC_BACK_RIGHT,    
     33          };
     34          
     35          /****************************************************************
     36          *Function   :  ir_gpio_init
     37          *Description:  申请红外接收的IO  
     38          *Input      :  无
     39          *Output     :  无
     40          *Return     :  无
     41          *Others     :  
     42          ******************************************************************/
     43          U8 ir_gpio_init(void)
     44          {
     45            int ret = -1;
     46            for( int i=0; i<IR_DECODER_MAX; i++ )
     47            {
     48              ret = gpio_request_one(ir_gpio[i],GPIO_F_DIR_IN);
     49              
     50              if(ret != -1)
     51              {
     52                ;
     53              }
     54              else
     55              {
     56                printf("ir io not ok i=%d\r\n",i);
     57              }
     58            }  
     59            return 0;
     60          }
     61          
     62          /****************************************************************
     63          *Function   :  ir_rx_init
     64          *Description:  红外接收初始化  
     65          *Input      :  无
     66          *Output     :  无
     67          *Return     :  无
     68          *Others     :  
     69          ******************************************************************/
     70          void ir_rx_init(void)
     71          {
     72            U8 i;
     73            printf("ir_rx_init\r\n");
     74            memset(port_state, 0, sizeof(port_state));
     75            memset(write_ptr, 0, sizeof(write_ptr));
     76            memset(read_ptr, 0, sizeof(read_ptr));
     77            memset(data_length, 0, sizeof(data_length));
     78            memset(working_byte, 0, sizeof(working_byte));
     79            memset(capture_counter, 0, sizeof(capture_counter));
     80            ir_gpio_init();
     81            for(i=0;i<REMOTE_DECODER_MAX;i++)
     82            {
     83              remote_decode_init(i);
     84              #ifdef USE_VIRTUAL_WALL
     85                aovw_decode_init(i);
     86              #endif
     87            }
     88          
     89            printf("ir_rx_init ok!!\r\n");
     90          }
     91          
     92          /****************************************************************
     93          *Function   :  ir_rx_q_put
     94          *Description:  将数据存入队列  
     95          *Input      :  U8 index:接收头ID
     96          *              U8 value:存入的数据
     97          *Output     :  无
     98          *Return     :  无
     99          *Others     :  
    100          ******************************************************************/
    101          void ir_rx_q_put(U8 index, U8 value)
    102          {
    103            port_state[index][write_ptr[index]] = value;
    104            write_ptr[index]++;
    105            if (write_ptr[index] >= IR_QUEUE_LEN)
    106            {
    107              write_ptr[index] = 0;
    108            }
    109            data_length[index]++;
    110          }
    111          
    112          /****************************************************************
    113          *Function   :  ir_rx_q_get
    114          *Description:  从接收队列中取出数据  
    115          *Input      :  U8 index:接收头ID            
    116          *Output     :  取出的数据
    117          *Return     :  无
    118          *Others     :  
    119          ******************************************************************/
    120          U8 ir_rx_q_get(U8 index)
    121          {
    122            U8 state;
    123            //hal_ints_off( );
    124            state = port_state[index][read_ptr[index]];
    125            read_ptr[index]++;
    126            if (read_ptr[index] >= IR_QUEUE_LEN)
    127            {
    128              read_ptr[index] = 0;
    129            }
    130            data_length[index]--;
    131            //hal_ints_on( );
    132            
    133            return state;    
    134          }
    135          
    136          /****************************************************************
    137          *Function   :  ir_rx_q_empty
    138          *Description:  接收队列是否为空  
    139          *Input      :  U8 index:接收头ID            
    140          *Output     :  1:接收队列里还有数据 0:接收队列为空
    141          *Return     :  无
    142          *Others     :  
    143          ******************************************************************/
    144          U8 ir_rx_q_empty(U8 index)
    145          {
    146            if (data_length[index] == 0)
    147            {
    148              return 1;
    149            }
    150            else
    151            {
    152              return 0;
    153            }
    154          }
    155          
    156          /****************************************************************
    157          *Function   :  ir_rx_q_full
    158          *Description:  接收队列是否已满 
    159          *Input      :  U8 index:接收头ID            
    160          *Output     :  1:接收队列已满 0:接收队列未满
    161          *Return     :  无
    162          *Others     :  
    163          ******************************************************************/
    164          U8 ir_rx_q_full(U8 index)
    165          {
    166            if (data_length[index] == IR_QUEUE_LEN)
    167            {
    168              return 1;
    169            }
    170            else
    171            {
    172              return 0;
    173            }
    174          }
    175          
    176          /****************************************************************
    177          *Function   :  ir_rx_capture_4khz
    178          *Description:  采集各个接收头的电平,将结果存到接收队列里,4K中断里执行 
    179          *Input      :  无            
    180          *Output     :  无
    181          *Return     :  无
    182          *Others     :  
    183          ******************************************************************/
    184          void ir_rx_capture_4khz(void)
    185          {
    186            U8 index;
    187            U8 state;
    188            
    189            for (index=0; index<IR_DECODER_MAX; index++)
    190            {
    191              //printf("ir rx gpio:%x\r\n",ir_gpio[index]);
    192              // state = gpio_get_value(ir_gpio[index]);
    193              state = gpio_get_value(ir_gpio[index]);
    194              state = (~state) & 0x01;
    195              working_byte[index] = (working_byte[index] << 1) | state;
    196              capture_counter[index]++;
    197              if (capture_counter[index] == 8)
    198              {
    199                if (ir_rx_q_full(index) != 1)
    200                {
    201                  ir_rx_q_put(index, working_byte[index]);
    202                  working_byte[index] = 0;
    203                  capture_counter[index] = 0;
    204                }
    205              }
    206            }
    207          }
    208          #include "ui-config.h"
    209          #include "lib.h"
    210          void cinvy_set_time(int hour,int min)
    211          {
    212                //设置时间前先赋值
    213                tm tt_day;    
    214                tt_day.week    = 1;//星期取值范围0-6,0代表星期天，6代表星期六
    215                tt_day.hour    = hour;
    216                tt_day.min     = min;
    217                act_command_q((U32)CMD_CLOCK, (U8)CMD_RUN, (void *)&tt_day, sizeof(tm));
    218               // set_current_time_info(&set_time);
    219          }
    220          
    221          void cinvy_book(int hour,int min)
    222          {
    223                 //设置预约示例 
    224                  schedule_time_info tt_schedule_info;
    225                  
    226                  tt_schedule_info.SCH_ENABLE.BYTE = 0x7F;
    227                  tt_schedule_info.t[0].hour = hour;
    228                  tt_schedule_info.t[0].min  = min;
    229                  tt_schedule_info.t[1].hour = hour;
    230                  tt_schedule_info.t[1].min  = min;
    231                  tt_schedule_info.t[2].hour = hour;
    232                  tt_schedule_info.t[2].min  = min;
    233                  tt_schedule_info.t[3].hour = hour;
    234                  tt_schedule_info.t[3].min  = min;
    235                  tt_schedule_info.t[4].hour = hour;
    236                  tt_schedule_info.t[4].min  = min;
    237                  tt_schedule_info.t[5].hour = hour;
    238                  tt_schedule_info.t[5].min  = min;
    239                  tt_schedule_info.t[6].hour = hour;
    240                  tt_schedule_info.t[6].min  = min;
    241                  act_command_q(CMD_SCHDULE, CMD_RUN, (void *)&tt_schedule_info, sizeof(schedule_time_info));
    242          }
    243          
    244          /****************************************************************
    245          *Function   :  ir_rx_decode
    246          *Description:  从接收队列里取出数据,按照编码格式进行解码 
    247          *Input      :  无            
    248          *Output     :  无
    249          *Return     :  无
    250          *Others     :  
    251          ******************************************************************/
    252          extern U8 time_set_buf[IR_DECODER_MAX][5];
    253          
    254          void ir_rx_decode(void)
    255          {
    256            U8 state, value;
    257            U8 index, i;
    258            int16_t result;
    259            
    260            for (index=0; index<IR_DECODER_MAX; index++)
    261            {
    262              while (ir_rx_q_empty(index) != 1)
    263              { 
    264                value = ir_rx_q_get(index);	
    265                for(i=0; i<8; i++)
    266                {	  	
    267                  state = (value >> (7-i))&0x01; 
    268                  //if (index == IR_POSITION_OMNI) 
    269                  {     
    270                  	/*遥控器和充电座的解码,如果遥控器和充电座的编码方式不一致,需要分开解释*/
    271                    result = remote_decode_ir(index, state);
    272                    if ((result)&&(remote_decode[index].rxByte != 0))
    273                    {
    274                      if(result==2)
    275                      {
    276                      current_ir_code = remote_decode[index].rxByte;//存放遥控器的数据
    277                      remote_timer  = REMOTE_DATA_KEEP_COUNT;
    278                      }
    279                      else if(result==1)
    280                      {
    281                          ir_val[index] = remote_decode[index].rxByte;  //存放充电座的信号
    282                      }
    283                      else if(result==3)
    284                      {
    285          //                 printf("schedule_data %x \r\n",remote_decode[index].schedule_data[0]);
    286          //                 printf("schedule_data %x \r\n",remote_decode[index].schedule_data[1]);
    287          //                 printf("schedule_data %x \r\n",remote_decode[index].schedule_data[2]);
    288          //                 printf("schedule_data %x \r\n",(U8)(0xDD+0x2D+remote_decode[index].schedule_data[0]+remote_decode[index].schedule_data[1]));
    289          //                 printf("\r\n");
    290                      }
    291                      ir_val_test[index] = ir_val[index];   
    292                      result=0;
    293          //            printf("%d ir %x\r\n",index,remote_decode[index].rxByte);
    294                      
    295                    }
    296                    
    297                    #ifdef USE_VIRTUAL_WALL
    298                    result = aovw_decode_ir(index, state);//虚拟墙解码
    299          		      if (result == 0)
    300          		      {
    301                      ir_val[index] = AOVW_BYTE;       //检测到虚拟墙
    302                      ir_val_test[index] = AOVW_BYTE;
    303          		        //printf("aovw\r\n");	                        
    304          		      }
    305          		      #endif
    306                  }
    307                }
    308              }
    309            }
    310          }
    311          
    312          /****************************************************************
    313          *Function   :  remote_ir_get
    314          *Description:  获取接收头接收到的充电座的信号 
    315          *Input      :  IR_REMOT_POSITION_E index 接收头ID            
    316          *Output     :  无
    317          *Return     :  接收头接收到的数据
    318          *Others     :  
    319          ******************************************************************/
    320          uint8_t remote_ir_get(IR_REMOT_POSITION_E index)
    321          {
    322            uint8_t val;
    323            val = ir_val[index];
    324            ir_val[index] = 0;
    325            return val;
    326          }
    327          
    328          /****************************************************************
    329          *Function   :  get_ir_local
    330          *Description:  获取接收头接收到遥控器的数据 
    331          *Input      :  IR_REMOT_POSITION_E index 接收头ID            
    332          *Output     :  无
    333          *Return     :  接收头接收到的数据
    334          *Others     :  
    335          ******************************************************************/
    336          uint8_t get_ir_local(void)
    337          {
    338            uint8_t val;
    339            val = current_ir_code;
    340            if (remote_timer > 0)
    341            {
    342              remote_timer--;
    343              if (remote_timer == 0)
    344              {
    345                current_ir_code = 0;
    346              } 
    347            }    
    348            return val;
    349          }
    350          
    351          /****************************************************************
    352          *Function   :  get_ir_test
    353          *Description:  获取接收头接收到的数据
    354          *Input      :  IR_REMOT_POSITION_E index 接收头ID            
    355          *Output     :  无
    356          *Return     :  接收头接收到的数据
    357          *Others     :  
    358          ******************************************************************/
    359          uint8_t get_ir_test(IR_REMOT_POSITION_E index)
    360          {
    361            uint8_t val;
    362            val = ir_val_test[index];
    363            ir_val_test[index] = 0;
    364            return val;
    365          }
    366          
    367          /****************************************************************
    368          *Function   :  ir_rx_code_get
    369          *Description:  将其他方式接收到的数据写到遥控和充电座所使用的变量 
    370          *Input      :  uint8_t chan 接收通道
    371          *              uint8_t val  接收到的数据        
    372          *Output     :  无
    373          *Return     :  无
    374          *Others     :  
    375          ******************************************************************/
    376          void ir_rx_code_get(uint8_t chan, uint8_t val)
    377          {
    378              ir_val_test[chan] = val;
    379          
    380              current_ir_code = val;
    381              ir_val[chan]=val;
    382              
    383             //if(chan == 1)
    384             //    local_ir_code = val;
    385          
    386             remote_timer = 16;
    387          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   cinvy_book
        64   -> act_command_q
      16   cinvy_set_time
        16   -> act_command_q
       0   get_ir_local
       0   get_ir_test
      16   ir_gpio_init
        16   -- Indirect call
      24   ir_rx_capture_4khz
        24   -- Indirect call
        24   -> ir_rx_q_full
        24   -> ir_rx_q_put
       0   ir_rx_code_get
      24   ir_rx_decode
        24   -> ir_rx_q_empty
        24   -> ir_rx_q_get
        24   -> remote_decode_ir
      16   ir_rx_init
         0   -- Indirect call
        16   -- Indirect call
        16   -> __aeabi_memclr4
        16   -> ir_gpio_init
        16   -> remote_decode_init
       0   ir_rx_q_empty
       0   ir_rx_q_full
       0   ir_rx_q_get
       8   ir_rx_q_put
       0   remote_ir_get


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
      12  ?Subroutine0
      20  ?_0
      16  ?_1
      20  ?_2
      54  cinvy_book
      32  cinvy_set_time
      20  current_ir_code
          remote_timer
          ir_val
          ir_val_test
      20  get_ir_local
      12  get_ir_test
      52  ir_gpio_init
      84  ir_rx_capture_4khz
      16  ir_rx_code_get
     104  ir_rx_decode
     104  ir_rx_init
      16  ir_rx_q_empty
      18  ir_rx_q_full
      40  ir_rx_q_get
      38  ir_rx_q_put
     768  port_state
       8  read_ptr
      12  remote_ir_get
      56  working_byte
          capture_counter
          write_ptr
          data_length
          ir_gpio

 
 796 bytes in section .bss
  56 bytes in section .data
 702 bytes in section .text
 
 702 bytes of CODE memory
 852 bytes of DATA memory

Errors: none
Warnings: none
