###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:32
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\海尔\新版+8k解码+预约\src\wifi\wifi_demo2\simwifi_demo2.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\wifi\wifi_demo2\simwifi_demo2.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  
#        F:\海尔\新版+8k解码+预约\project\Debug\List\simwifi_demo2.lst
#    Object file  =  F:\海尔\新版+8k解码+预约\project\Debug\Obj\simwifi_demo2.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\wifi\wifi_demo2\simwifi_demo2.c
      1          #include <ui-config.h>
      2          #include "ui-commands.h"
      3          #include "am_date_base.h"
      4          #include "am_config_macro.h"
      5          #include "time.h"
      6          #include "lib.h"
      7          #include "local_key_check.h"
      8          #include "syscall_api.h"
      9          #include "remote.h"
     10          #include "act.h"
     11          #include "display.h"
     12          #include "am_key.h"
     13          #include "sensor/sensor.h"
     14          #include "ui-manager/exception.h"
     15          #include "motor/robot_suction.h"
     16          #include "ui-song-player.h"
     17          #include "display.h"
     18          #include "ui_uart_handle/mqueue.h"
     19          #include "simwifi_demo2.h"
     20          #include "SimSweep_demo2.h"
     21          #include "charge/charge.h"
     22          #if defined(USE_WIFI_DEMO_2)
     23          #define WIFI_UART 1
     24          #define WIFI_RESET_HOLD_COUNT 10 //100ms
     25          static U16 wifi_powerup_count = 0;
     26          U8 wifi_enable_flag;
     27          static sys_state_info sys_state_info_p; 
     28          static sys_current_info sys_current_info_p;   /*系统电流*/
     29          extern U8 send_map_flag;
     30          
     31          extern schedule_time_info  obj_schedule_info_msg_t;
     32          
     33          /*使能wifi功能 0不使能，1使能*/
     34          //uint8_t  enable_wifi = 1;
     35          
     36          uint8_t  wifi_state = 0;
     37          
     38          /*复位wifi模块标志，0不复位，1复位，2中间状态*/
     39          uint8_t  reset_wifi_flag = 0;
     40          
     41          
     42          uint8_t UartTxBuf[UART_TX_BUF_SIZE];//UART发送缓冲器
     43          //uint16_t error_count = 0;
     44          static uint16_t  check_count = 0;
     45          
     46          static wifi_uart_protocol_t pack;
     47          static U8  totaLen=0;
     48          static U8  revbuf[20];
     49          static U16 uart_cmd = 0; 
     50          static U16 uart_cmd_start_delay = 0;
     51          static U8  uart_cmd_dock_delay = 0;
     52                 U8  need_send_ack = 0;
     53          
     54          //static tm  rtc_tm;
     55          U8 wificonnectok = 0;
     56          
     57          U8 send_config_cmd = 0;
     58          U8 recive_connect_cmd_ok = 0;
     59          void Usart_SendByte(uint8_t Value);
     60          
     61          
     62          static void check_and_powerup_wifi_module(void)
     63          {
     64              if (wifi_powerup_count == 0) {
     65                  gpio_request_one(AM_IO_WIFI_POWER,GPIO_F_DIR_OUT|GPIO_F_INIT_LOW);
     66                  gpio_request_one(AM_IO_RESET_WIFI,GPIO_F_DIR_OUT|GPIO_F_INIT_LOW);
     67                  gpio_set_value(AM_IO_WIFI_POWER,1);
     68                  gpio_set_value(AM_IO_RESET_WIFI,0);
     69              } else if (wifi_powerup_count == WIFI_RESET_HOLD_COUNT) {
     70                  gpio_set_value(AM_IO_WIFI_POWER,1);
     71                  gpio_set_value(AM_IO_RESET_WIFI,1);
     72                  
     73              }
     74              
     75              if (wifi_powerup_count <= WIFI_RESET_HOLD_COUNT) {
     76                wifi_powerup_count++;
     77              }
     78          }
     79          
     80          void wifi_handle_sleep(void)
     81          {
     82              printf("wifi handle sleep###\r\n");
     83              //gpio_request_one(AM_IO_WIFI_POWER,GPIO_F_DIR_OUT|GPIO_F_INIT_HIGH);
     84              //gpio_request_one(AM_IO_RESET_WIFI,GPIO_F_DIR_OUT|GPIO_F_INIT_HIGH);
     85              gpio_set_value(AM_IO_WIFI_POWER,1);
     86              gpio_set_value(AM_IO_RESET_WIFI,1);
     87          }
     88          
     89          void wifi_init(void)
     90          {
     91            //set_wifi_enable(1);
     92            //delay_ms(8);
     93            //uartwifi_init();
     94            wificonnectok = 0;
     95            recive_connect_cmd_ok = 0;
     96            check_and_powerup_wifi_module();
     97          }
     98          
     99          
    100          /*****************************************************
    101          **函数体名：Usart1_SendHexString
    102          **功能描述：串口2发送二进制数据流
    103          **输入参数：u8 *pData,u32 Long(数组大小)
    104          **输出参数：无 
    105          *****************************************************/
    106          extern void set_wifi_uart_tx_fifo_empty_irq(void);
    107          
    108          void Usart_SendHexString(uint8_t *pHexBuf,uint32_t Long)
    109          {
    110            uint32_t i;
    111           // printf("send:\r\n");
    112            for(i=0;i<Long;i++)
    113            {
    114              //senduart2(pHexBuf[i]);
    115             // printf("%x ",pHexBuf[i]);
    116              uart_txrx_q_put(WIFI_TX_INDEX,pHexBuf[i]);
    117            }
    118            //printf("\r\n");
    119            set_wifi_uart_tx_fifo_empty_irq();
    120          }
    121          
    122          
    123          
    124          static U8 pack_gen_sum(U8 *p)
    125          {
    126              U8 sum = 0,i=0;
    127          	//U8 *data_buf;
    128              U16 tmp;
    129              wifi_uart_protocol_t *protocol_pack  = (wifi_uart_protocol_t *)p;
    130            
    131              if( (protocol_pack->msglen < LEN_MIN) )//长度的合法性
    132              {
    133                  return 0;
    134              }
    135          
    136              sum = p[2];
    137             // data_buf = (U8 *)(&p[3]);
    138             // protocol_pack->data_buf = (U8 *)(&p[3]);
    139              for(i = 0;(i<protocol_pack->msglen-1);i++)
    140              {
    141                  tmp =  protocol_pack->data_buf[i];
    142                  //printf("tmp=%x\r\n",tmp);
    143            	    sum += protocol_pack->data_buf[i];
    144              }
    145           
    146              //sum = ~sum;
    147              //sum += 1;
    148            
    149              return sum;
    150          
    151          }
    152          
    153          U8 cal_pack_sum(U8 *p)
    154          {
    155              U8 sum = 0,i=0;
    156          	  U8 *data_buf;
    157              U16 tmp;
    158              wifi_uart_protocol_t *protocol_pack  = (wifi_uart_protocol_t *)p;
    159            
    160              if( (protocol_pack->msglen < LEN_MIN) )//长度的合法性
    161              {
    162                  return 0;
    163              }
    164          
    165              sum = p[2];
    166              data_buf = (U8 *)(&p[3]);
    167             // protocol_pack->data_buf = (U8 *)(&p[3]);
    168              for(i = 0;(i<protocol_pack->msglen-1);i++)
    169              {
    170                  tmp =  data_buf[i];
    171                 // printf("tmp=%x\r\n",tmp);
    172            	    sum += data_buf[i];
    173              }
    174           
    175              //sum = ~sum;
    176              //sum += 1;
    177            
    178              return sum;
    179          }
    180          
    181          U8 send_pack(U8 cmd, U8 *data_buf, U8 datalen)
    182          {
    183              
    184              U8 i;
    185              u16 tmp_sum;
    186              U8 *p = (U8*)&pack;
    187              memset((U8 *)p, 0, sizeof(wifi_uart_protocol_t));
    188              pack.head        = PACK_HEAD;
    189              pack.msglen      = datalen + 1;
    190              pack.cmd         = cmd;
    191              pack.data_buf    = data_buf;
    192              pack.checksum    = pack_gen_sum((U8*)&pack);
    193              memset(UartTxBuf,0x00,sizeof(UartTxBuf));
    194              for(i = 0;i< LEN_OF_BASE_PACK;i++)
    195              {
    196                  UartTxBuf[i] = p[i];
    197              }
    198            
    199              for(i = 0;i<datalen;i++)
    200              {
    201                  UartTxBuf[(i+LEN_OF_BASE_PACK)] = pack.data_buf[i];   
    202              }
    203            
    204              UartTxBuf[(i+LEN_OF_BASE_PACK)] = pack.checksum ;
    205              tmp_sum = pack.checksum;
    206             // printf("checksum=%x\r\n", tmp_sum);
    207              Usart_SendHexString(UartTxBuf,(pack.msglen+3));
    208              return 0;
    209          }
    210          
    211          
    212          
    213          static U8 pack_parser(U8 *pack)
    214          {
    215              U8 data_len;
    216          	U8 cmd;
    217          	U8 *data_buf = 0;
    218          	wifi_uart_protocol_t *protocol_pack  = (wifi_uart_protocol_t *)pack;
    219          	cmd       = protocol_pack->cmd;
    220          	data_buf      = protocol_pack->data_buf;
    221          	data_len  = protocol_pack->msglen - 1;
    222          
    223              switch(cmd)
    224              { 
    225            	    //查询基础信息
    226            	    case CMD_CHEACK_BASE_INFO:
    227                  {
    228                      //send_base_info();
    229                  }
    230                  break;
    231             	    //控制指令下发
    232                  case CMD_CONTROL:
    233                  {
    234                     // printf("control cmd\r\n");
    235                      parser_control_cmd(&pack[3]);
    236                      need_send_ack = 1;
    237                  }
    238               	break;
    239             	    //地图指令
    240                  case CMD_MAP:
    241                  {
    242                     // printf("parser map\r\n");
    243                      parser_map_info(&pack[3]);
    244                  }
    245                  break;
    246                  //WIFI网络状态查询
    247                  case CMD_WIFI_STATE:
    248                  {
    249                    //  printf("parser wifi state\r\n");
    250                      parser_wifi_state(&pack[3]);
    251                  }
    252                  break;
    253                  //云平台状态查询,即查询扫地机当前的状态
    254                  case CMD_GET_ROBOT_STATE:
    255                  {
    256                      send_robot_state_to_wifi();
    257                      need_send_ack = 0;
    258                  }
    259                  break;  
    260                  //配网命令
    261                  case CMD_CONFIG_NETWORK:
    262                  {
    263                      //printf("wifi ACK ok\r\n");
    264               	    recive_connect_cmd_ok = 1;
    265                      send_config_cmd = 0;
    266                  }
    267                  break; 
    268                  //进入厂测模式
    269                  case CMD_ENTER_TEST:
    270                  {
    271               	    send_wifi_test_result();
    272                  }
    273                  break;        	 
    274                  default:
    275               	break;
    276              }
    277              return 0;
    278          }
    279          
    280          
    281          static U8  bat_state = 3;
    282          static U8  last_bat_state = 0;
    283          
    284          U16 convert_to_adc( s16 voltage) 
    285          {
    286              U32 mv = voltage<<12;
    287              mv = mv/18975;//0.18 ---> 18032; 0.174 --> 18975       
    288              return (U16)mv;
    289          }
    290          
    291          void check_bat_level(U16  voltage)
    292          {
    293              last_bat_state = bat_state;
    294              if((LOW_POWER<(voltage))&&((voltage) <=MID_POWER))
    295          	{
    296                  bat_state = 2;
    297              }
    298          	else if((MID_POWER<(voltage))&&((voltage)<=FULL_POWER))
    299          	{
    300                  bat_state = 1;
    301          	}
    302              if((voltage)>FULL_POWER)//trick表示充电停止 //3887
    303              {
    304                  bat_state = 0;
    305              }
    306          
    307              
    308              if(((bat_state < last_bat_state) && (sys_state_info_p.robot_state == ROBOT_STATE_CHARGING))
    309                  || ((bat_state > last_bat_state) && (sys_state_info_p.robot_state != ROBOT_STATE_CHARGING)))
    310              {
    311                  if(last_bat_state > 0)
    312                  {
    313                      bat_state = last_bat_state;
    314                  }
    315              }
    316          
    317              if(sys_state_info_p.charging_state == CHARGING_COMPLETE)
    318              {
    319                  bat_state = 2;
    320              }
    321          }
    322          void handle_wifi_bat_level(void)
    323          {
    324              static U16   tmp_cnt = 0;
    325              static U16  voltage_average = 0;
    326              U16 tmp_voltage = 0;
    327              
    328              sys_info_get(SYS_CURRENT_INFO,(long)&sys_current_info_p);
    329              sys_info_get(SYS_STATE_INFO, (long )&sys_state_info_p);
    330          
    331              tmp_voltage = convert_to_adc( sys_current_info_p.battery_voltage) ;
    332          
    333              if(voltage_average == 0)
    334              {
    335                  voltage_average = tmp_voltage*2;
    336              }
    337              else
    338              {
    339                  voltage_average += tmp_voltage; 
    340              }
    341              
    342              if(voltage_average >= 3000)
    343              {
    344          	    voltage_average = (voltage_average>>1);
    345              }
    346             
    347              tmp_cnt += 1;
    348              if((tmp_cnt >= 2000)||((bat_state == 3)&&(tmp_cnt >= 50)))
    349              {
    350                  check_bat_level(voltage_average);
    351                  tmp_cnt = 0;
    352                  
    353              }
    354          }
    355          U8 uart_server_routine(void)
    356          {
    357            U16 tmp=0;
    358            static U8 tick_timeout = 0;
    359            static U16 rtc_get_cnt = 0;
    360            static U8 match_wifi = 0;
    361            static DECODE_STATE_E state = DECODE_PACK_WAIT;
    362            static U8 i=0;
    363            static int test = 0;
    364          
    365            check_and_powerup_wifi_module();
    366            if(wifi_powerup_count < WIFI_RESET_HOLD_COUNT)
    367            {
    368               return 0;
    369            }
    370            //接收超时
    371            tick_timeout++;
    372            if(tick_timeout >= 220)
    373            {
    374              uart_txrx_reset_writeptr(WIFI_RX_INDEX);
    375              uart_txrx_reset_readptr(WIFI_RX_INDEX);
    376              state = DECODE_PACK_WAIT;
    377              tick_timeout = 0;
    378            }
    379          
    380            
    381            while(uart_txrx_q_empty(WIFI_RX_INDEX)==0)
    382            {
    383              tmp = uart_txrx_q_get(WIFI_RX_INDEX);
    384          
    385              switch(state)
    386              {
    387                case DECODE_PACK_WAIT:
    388                  if(tmp == PACK_HEAD)
    389                  {
    390                    //  printf("aa\r\n");
    391                  	i = 0;
    392                  	totaLen= 0;
    393                    state = DECODE_PACK_HEAD;
    394                    revbuf[0]= tmp;
    395                    i++;
    396                  }     
    397                  tick_timeout = 0;
    398                	break;
    399                case DECODE_PACK_HEAD:
    400                	state = DECODE_PACK_READING;
    401                	totaLen = tmp+3;
    402                	revbuf[1] = tmp;
    403                  tick_timeout = 0;
    404                  //printf("bb=%x\r\n",tmp);
    405                	i++;
    406                	break;
    407                case DECODE_PACK_READING:
    408                  revbuf[i] = tmp;
    409                  //printf("cc=%x\r\n",tmp);
    410                	i++;
    411                  tick_timeout = 0;
    412                	if(i >= totaLen)
    413                	{
    414                      // printf("cc=%x\r\n",tmp);
    415                       
    416                	  tmp = cal_pack_sum(revbuf);
    417                  //  printf("sum=%x\r\n",tmp);
    418                	  if(tmp == revbuf[totaLen-1])
    419                	  {
    420                	    pack_parser(revbuf);
    421                	  }	
    422                	  i=0;
    423                		totaLen = 0;
    424                	  state = DECODE_PACK_WAIT;	
    425                	  	
    426                	}
    427                	break;
    428                case DECODE_PACK_OK  :
    429                	break;
    430                case DECODE_PACK_ERR :
    431              	  break;
    432              } 
    433            }
    434            handle_wifi_bat_level();
    435          }
    436          
    437          
    438          void map_data_process(void)
    439          {
    440             
    441              static U8 time_cnt = 0;
    442              static U8 last_sys_state=0;
    443              static U8 last_pause_id = 0;
    444              static U8 last_ui_state = 0;
    445              static U8 last_song_state = 0;  
    446          
    447             
    448              UI_STATE_E   s = get_ui_state();
    449              
    450            
    451             // if(((local_map_point_available>0)||(send_map_flag > 0))/*&&(wifi_state == WIFI_CONNECT_OK)*/) 
    452              {
    453                  if(send_map_flag > 0)
    454                  {
    455                      
    456                     // time_cnt++;
    457                     // if(time_cnt >= 32)
    458                      {
    459                         // printf("send data\r\n");
    460                         // send_map_data_to_wifi();
    461                          send_map_flag = 0;
    462                         // time_cnt = 0;
    463                      }
    464                  }
    465                  //else
    466                  {
    467                     // printf("send data\r\n");
    468                      time_cnt++;
    469                      if(time_cnt >= 50)
    470                      {
    471                          time_cnt = 0;
    472                          send_map_data_to_wifi();
    473                      }
    474                  }
    475              }
    476          
    477              if(songplayer_is_playing() != last_song_state)
    478              {
    479                  if(songplayer_is_playing() == 1)
    480                  {
    481                      send_wifi_song_mute();
    482                  }
    483                  else
    484                  {
    485                      send_wifi_song_unmute();
    486                  }
    487              }
    488             
    489              last_ui_state  = s;
    490              last_song_state = songplayer_is_playing();
    491          }
    492          
    493          U8 get_bat_level(void)
    494          {
    495              return bat_state;
    496          }
    497          
    498          void set_wifi_enable(uint8_t value)
    499          {
    500          	if(value)
    501          		wifi_enable_flag=1;
    502          	else
    503          		wifi_enable_flag=0;
    504          
    505          	
    506          }
    507          
    508          uint8_t get_wifi_enable_state(void)
    509          {
    510              return wifi_enable_flag;
    511          }
    512          
    513          void set_wifi_state(uint8_t value)
    514          {
    515              wifi_state = value;
    516          }
    517          
    518          uint8_t get_wifi_state(void)
    519          {
    520              return wifi_state;
    521          }
    522          
    523          
    524          void set_reset_wifi_flag(uint8_t value)
    525          {
    526              reset_wifi_flag = value;
    527          }
    528          
    529          uint8_t get_reset_wifi_flag(void)
    530          {
    531              return reset_wifi_flag;
    532          }
    533          void exit_wifi(void)
    534          {   
    535           //   set_wifi_enable(0);  
    536          }
    537          
    538          #endif
    539          


 

 


Errors: none
Warnings: none
