###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:33
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\cfg\tm_cfg.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\cfg\tm_cfg.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  F:\海尔\新版+8k解码+预约\project\Debug\List\tm_cfg.lst
#    Object file  =  F:\海尔\新版+8k解码+预约\project\Debug\Obj\tm_cfg.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\cfg\tm_cfg.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          /*by liyongyong*/
      6          #include "am_tm_api.h"
      7          #include "am_type.h"
      8          #include "syscall_api.h"
      9          #include "am_device.h"
     10          
     11          int gtm0_id;
     12          int gtm1_id;
     13          int gtm2_id;
     14          int capture_id;
     15          int m_pwm_id;
     16          int m_capture_id;
     17          int charge_pwm_id;
     18          int side_pwm_id;
     19          
     20          void charger_pwm_handler(int arg)
     21          {
     22            ;
     23          }
     24          
     25          /****************************************************************
     26          *Function   :  sys_tm_cfg
     27          *Author     :  lyy
     28          *Date       :  2017.4.20
     29          *Description:  初始化timer配置
     30          *CallBy     :  任何地方，中断除外
     31          *Input      :  无
     32          *Output     :  无
     33          *Return     :  无
     34          *Others     :  
     35          *History    : //修改历史
     36              <author>       <time>      <version>           <desc>
     37              lyy            17.4.28       v1.0         build this function
     38          ******************************************************************/
     39          void sys_tm_cfg(void)
     40          {
     41            GPTM_TimeBaseInitTypeDef_t gftmInit;
     42            UserOutInit_t UserOutInit;
     43          
     44            MCTM_TimeBaseInitTypeDef mctmInit;
     45            MUserOutInit_t MUserOutInit;
     46            ////////////////////////////gftm pwm///////////////////////////////////////
     47            //gtm1_id = tm_request(GPTM,GP_TM1_ID);//主刷和边刷
     48            gtm1_id = open(DEV_GPTM,GP_TM1_ID);
     49          
     50            gftmInit.CounterReload = 1000;
     51            gftmInit.Prescaler     = 5;  //lqw
     52            gftmInit.CounterMode   = GPTM_CNT_MODE_UP;
     53            gftmInit.PSCReloadTime = GPTM_PSC_RLD_IMMEDIATE;
     54            //tm_gptm_cfg(gtm1_id,&gftmInit);
     55            ioctl(gtm1_id, TM_GPTM_BASE_INIT, &gftmInit);
     56          
     57            UserOutInit.OutInit.OutputMode        = GPTM_OM_PWM1;//ACTIVE , WHEN  CNTR < CHxCCR
     58            UserOutInit.OutInit.Control           = GPTM_CHCTL_ENABLE; //enable chx
     59            UserOutInit.OutInit.Polarity          = GPTM_CHP_NONINVERTED;//h is active
     60            UserOutInit.OutInit.Compare           = 0; //占空比
     61            UserOutInit.OutInit.AsymmetricCompare = 0;
     62          
     63            UserOutInit.OutMode.irq         = 0;//GPTM_INT_CH0CC | GPTM_INT_CH1CC | GPTM_INT_CH2CC | GPTM_INT_CH3CC;//中断
     64            UserOutInit.OutMode.dmaReqMode  = 0;//dma request
     65            for(int i = 2; i<4; i++)
     66            {
     67              UserOutInit.OutInit.Channel  = (GPTM_CH_Enum)i;
     68              //tm_gptm_output_pwm_cfg(gtm1_id, &UserOutInit);
     69              ioctl(gtm1_id,TM_GPTM_OUT_MODE_INIT, &UserOutInit);
     70            }
     71          ///////////////////////////////////////////////////
     72          
     73            gtm0_id = open(DEV_GPTM,GP_TM0_ID);//tm_request(GPTM,GP_TM0_ID);
     74          
     75            gftmInit.CounterReload = 1000;
     76            gftmInit.Prescaler     = 3;//5; //by lqw
     77            gftmInit.CounterMode   = GPTM_CNT_MODE_UP;
     78            gftmInit.PSCReloadTime = GPTM_PSC_RLD_IMMEDIATE;
     79            //tm_gptm_cfg(gtm0_id,&gftmInit);
     80            ioctl(gtm0_id, TM_GPTM_BASE_INIT, &gftmInit);
     81          
     82            UserOutInit.OutInit.OutputMode        = GPTM_OM_PWM1;//ACTIVE , WHEN  CNTR < CHxCCR
     83            UserOutInit.OutInit.Control           = GPTM_CHCTL_ENABLE; //enable chx
     84            UserOutInit.OutInit.Polarity          = GPTM_CHP_NONINVERTED;//h is active
     85            UserOutInit.OutInit.Compare           = 0; //占空比
     86            UserOutInit.OutInit.AsymmetricCompare = 0;
     87          
     88            UserOutInit.OutMode.irq         = 0;//GPTM_INT_CH3CC;//中断
     89            UserOutInit.OutMode.dmaReqMode  = 0;//dma request
     90          
     91            UserOutInit.OutInit.Channel  =(GPTM_CH_Enum)0;
     92            //tm_gptm_output_pwm_cfg(gtm0_id, &UserOutInit);
     93            ioctl(gtm0_id,TM_GPTM_OUT_MODE_INIT, &UserOutInit);
     94          ////////////////////////////gptm capture////////////////////////////////////////
     95          
     96            gtm2_id = open(DEV_GPTM,GP_TM0_ID);//tm_request(GPTM,GP_TM2_ID);
     97            gftmInit.CounterReload = 270;
     98            gftmInit.Prescaler     = 6;
     99            gftmInit.CounterMode   = GPTM_CNT_MODE_UP;
    100            gftmInit.PSCReloadTime = GPTM_PSC_RLD_IMMEDIATE;
    101            //tm_gptm_cfg(gtm2_id,&gftmInit);
    102            ioctl(gtm2_id, TM_GPTM_BASE_INIT, &gftmInit);
    103          
    104            UserOutInit.OutInit.OutputMode        = GPTM_OM_PWM1;//ACTIVE , WHEN  CNTR < CHxCCR
    105            UserOutInit.OutInit.Control           = GPTM_CHCTL_ENABLE; //enable chx
    106            UserOutInit.OutInit.Polarity          = GPTM_CHP_NONINVERTED;//h is active
    107            UserOutInit.OutInit.Compare           = 0; //占空比
    108            UserOutInit.OutInit.AsymmetricCompare = 0;
    109          
    110            UserOutInit.OutMode.irq         = 0;//GPTM_INT_CH3CC;//中断
    111            UserOutInit.OutMode.dmaReqMode  = 0;//dma request
    112          
    113            //UserOutInit.OutInit.Channel  = 0;
    114            //tm_gptm_output_pwm_cfg(gtm2_id, &UserOutInit);
    115            for(int i = 0; i<4; i++)
    116            {
    117              UserOutInit.OutInit.Channel  = (GPTM_CH_Enum)i;
    118              //tm_gptm_output_pwm_cfg(gtm2_id, &UserOutInit);
    119              ioctl(gtm2_id,TM_GPTM_OUT_MODE_INIT, &UserOutInit);
    120            }
    121          
    122          
    123          ///////////////////////////////mctm pwm///////////////////////////////////
    124            charge_pwm_id = open(DEV_MCTM,MC_TM2_ID);//tm_request(MCTM,MC_TM2_ID);
    125          
    126            mctmInit.CounterReload = 720;
    127            mctmInit.Prescaler     = 0;
    128            mctmInit.CounterMode   = MCTM_CNT_MODE_UP;
    129            mctmInit.PSCReloadTime = MCTM_PSC_RLD_IMMEDIATE;
    130            //tm_mctm_cfg(charge_pwm_id,&mctmInit);
    131            ioctl(charge_pwm_id, TM_MCTM_BASE_INIT, &mctmInit);
    132          
    133            MUserOutInit.OutInit.OutputMode = MCTM_OM_PWM2;
    134            MUserOutInit.OutInit.Control    = MCTM_CHCTL_ENABLE;
    135            MUserOutInit.OutInit.ControlN   = MCTM_CHCTL_ENABLE;
    136            MUserOutInit.OutInit.Polarity   = MCTM_CHP_NONINVERTED;
    137            MUserOutInit.OutInit.PolarityN  = MCTM_CHP_NONINVERTED;
    138            MUserOutInit.OutInit.IdleState  = MCTM_OIS_LOW;
    139            MUserOutInit.OutInit.IdleStateN = MCTM_OIS_HIGH;
    140            MUserOutInit.OutInit.Compare    = 0;
    141            MUserOutInit.OutMode.irq        = 0;
    142            MUserOutInit.OutMode.dmaReqMode = 0;
    143          
    144            MUserOutInit.OutInit.Channel  = (MCTM_CH_Enum)1;
    145            //tm_mctm_output_pwm_cfg(charge_pwm_id, &MUserOutInit);
    146            ioctl(charge_pwm_id, TM_MCTM_OUT_MODE_INIT, &MUserOutInit);
    147            request_irq(charge_pwm_id,(long)charger_pwm_handler,0);
    148          }
    149          
    150          /****************************************************************
    151          *Function   :  sys_tm_close
    152          *Author     :  lyy
    153          *Date       :  2017.4.20
    154          *Description:  关闭各路timer
    155          *CallBy     :  任何地方，中断除外
    156          *Input      :  无
    157          *Output     :  无
    158          *Return     :  无
    159          *Others     :  
    160          *History    : //修改历史
    161              <author>       <time>      <version>           <desc>
    162              lyy            17.4.28       v1.0         build this function
    163          ******************************************************************/
    164          void sys_tm_close()
    165          {
    166            close(gtm0_id);
    167            close(gtm1_id);
    168            close(gtm2_id);
    169            close(side_pwm_id);
    170            close(charge_pwm_id);
    171          }
    172          
    173          /****************************************************************
    174          *Function   :  sys_set_pwm_out_duty
    175          *Author     :  lyy
    176          *Date       :  2017.4.20
    177          *Description:  配置各路timer的pwm输出
    178          *CallBy     :  任何地方，中断除外
    179          *Input      :  参数
    180          *              channel：参考各路pwm的宏定义，如SIDE_BRUSH_PWM_CHANNEL，MAIN_BRUSH_PWM_CHANNEL等等
    181          *              Duty   ：pwm占空比值，各路pwm值的范围按照timer配置决定
    182          *Output     :  无
    183          *Return     :  无
    184          *Others     :  
    185          *History    : //修改历史
    186              <author>       <time>      <version>           <desc>
    187              lyy            17.4.28       v1.0         build this function
    188          ******************************************************************/
    189          void sys_set_pwm_out_duty(s16 channel , s16 Duty)
    190          {
    191            int id = -1;
    192          
    193            s16 Dutyfactor = Duty;
    194            switch(channel)
    195            {
    196            case SIDE_BRUSH_PWM_CHANNEL:
    197              id = gtm1_id;
    198          
    199              ioctl(id,GPTM_CHAN3_SET_DUTY,(void *)&Dutyfactor);
    200              break;
    201            case MAIN_BRUSH_PWM_CHANNEL:
    202              id = gtm1_id;
    203          
    204              ioctl(id,GPTM_CHAN2_SET_DUTY,(void *)&Dutyfactor);
    205              break;
    206            case BIN_LEFT_PWM_CHANNEL:
    207              id = gtm1_id;
    208          
    209              ioctl(id,GPTM_CHAN0_SET_DUTY,(void *)&Dutyfactor);
    210              break;
    211            case BIN_RIGHT_PWM_CHANNEL:
    212              id = gtm1_id;
    213          
    214              ioctl(id,GPTM_CHAN1_SET_DUTY,(void *)&Dutyfactor);
    215              break;
    216            case VACUUM_PWM_CHANNEL:
    217              id = gtm0_id;
    218          
    219              ioctl(id,GPTM_CHAN0_SET_DUTY,(void *)&Dutyfactor);
    220              break;
    221            case CHARGER_PWM_CHANNEL:
    222              id = charge_pwm_id;
    223          
    224              //tm_mctm_output_duty_set(id,chan,Dutyfactor);
    225              ioctl(id,MCTM_CHAN1_SET_DUTY,(void *)&Dutyfactor);
    226          	break;
    227            case HOU2_IR_SEND_PWM_CHANNEL:
    228              id = gtm2_id;
    229          
    230              break;
    231            case HOU1_IR_SEND_PWM_CHANNEL:
    232              id = gtm2_id;
    233          
    234              break;
    235            case QIAN1_IR_SEND_PWM_CHANNEL:
    236              id = gtm2_id;
    237          
    238              break;
    239            case QIAN2_IR_SEND_PWM_CHANNEL:
    240              id = gtm2_id;
    241          
    242              return;
    243            default:
    244              id = -1;
    245              break;
    246            }
    247          }
    248          
    249          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   charger_pwm_handler
       8   sys_set_pwm_out_duty
         8   -- Indirect call
     112   sys_tm_cfg
       112   -- Indirect call
       112   -> request_irq
      16   sys_tm_close
         0   -- Indirect call
        16   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      20  ??Subroutine4_0
       8  ?Subroutine0
      18  ?Subroutine1
      10  ?Subroutine2
       8  ?Subroutine3
       4  capture_id
       2  charger_pwm_handler
      20  gtm0_id
          gtm1_id
          gtm2_id
          charge_pwm_id
          side_pwm_id
       4  m_capture_id
       4  m_pwm_id
      88  sys_set_pwm_out_duty
     312  sys_tm_cfg
      50  sys_tm_close

 
  32 bytes in section .bss
 560 bytes in section .text
 
 560 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
