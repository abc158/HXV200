###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:33
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\cfg\uart_cfg.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\cfg\uart_cfg.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  F:\海尔\新版+8k解码+预约\project\Debug\List\uart_cfg.lst
#    Object file  =  F:\海尔\新版+8k解码+预约\project\Debug\Obj\uart_cfg.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\cfg\uart_cfg.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          /*by liyongyong*/
      6          #include "am_uart_api.h"
      7          #include "syscall_api.h"
      8          #include "am_device.h"
      9          #include "ui_uart_handle/mqueue.h"
     10          #ifdef USE_WIFI_DEMO_1
     11          #include "wifi/wifi_demo1/simwifi.h"
     12          #endif
     13          #include  <am_config_macro.h>
     14          //中断函数不调用库的远程函数，只能调用本地函数
     15          int uart_debug;
     16          int uart_ui;
     17          int uart_wifi;
     18          
     19          //uart 中断处理函数，sr是中断状态，data是接收的数据
     20          //return int : 当为发送中断时，用作返回要发送的数据，-1，表示数据发完。
     21          int uart_out_queue_is_empty()
     22          {
     23            return 1;
     24          }
     25          
     26          int uart_out_queue_read()
     27          {
     28            return 0;
     29          }
     30          
     31          int uart_out_queue_write(u16 val)
     32          {
     33            return 0;
     34          }
     35          
     36          int uart_in_queue_write(u16 val)
     37          {
     38            val = val;
     39            return 0;
     40          }
     41          
     42          int uart_in_queue_is_empty()
     43          {
     44            return 1;
     45          }
     46          
     47          int uart_in_queue_read()
     48          {
     49            return 0;
     50          }
     51          
     52          
     53          /****************************************************************
     54          *Function   :  debug_uart_handler
     55          *Author     :  lyy
     56          *Date       :  2017.4.20
     57          *Description:  打印口的中断处理函数
     58          *CallBy     :  
     59          *Input      :  参数
     60          *              sr:    中断状态
     61                         data： 接收到的数据
     62          *Output     :  无
     63          *Return     :  无
     64          *Others     :  
     65          *History    : //修改历史
     66              <author>       <time>      <version>           <desc>
     67              lyy            17.4.28       v1.0         build this function
     68          ******************************************************************/
     69          int debug_uart_handler(int sr, int data)
     70          {
     71            int ret = -1;
     72            switch(sr)
     73            {
     74              case USART_IID_THRE://发送中断,这个只要打开发送中断,然后如果uart fifo为空，就会产生中，可以在这里处理要发送的数据
     75              	if(!uart_out_queue_is_empty())
     76                  {
     77                    ret = uart_out_queue_read();
     78                  }
     79                  else
     80                  {
     81                    ret  = -1;
     82                  }
     83              	break; 
     84              case USART_IID_RDA :
     85              	uart_in_queue_write((uint8_t)data);
     86                  ret = 0;
     87              	break;  
     88              case USART_IID_CTI :
     89              	break;   
     90              case USART_IID_MS  :
     91              	break;  
     92              case USART_IID_NON :
     93              	break;
     94              case USART_IID_RLS :  	
     95              	break;  
     96              default:
     97              	break;
     98            }
     99            return ret;
    100          }
    101          
    102          int ui_uart_handler(int sr, int data)
    103          {
    104            int ret = -1;
    105            if(sr == USART_IID_RDA)
    106            {    
    107             
    108          
    109          
    110              
    111            }
    112            
    113            if(sr == USART_IID_THRE)
    114            {
    115              if(uart_txrx_q_empty(TX_INDEX))
    116              {
    117                ret = -1;
    118              }
    119              else
    120              {
    121                ret = uart_txrx_q_get(TX_INDEX);//uart_out_3_getc( ) ; //
    122              }
    123          
    124              return ret;
    125            } 
    126            if(sr == USART_IID_CTI)
    127            {
    128            }
    129            if(sr == USART_IID_RLS)
    130            {
    131            }  
    132            return 0;
    133            //return ret;
    134          }
    135          
    136          
    137          
    138          int wifi_uart_handler(int sr, int data)
    139          {
    140            int ret = -1;
    141            if(sr == USART_IID_RDA)
    142            {   
    143              #ifdef USE_WIFI_DEMO_1
    144                IRQ_Usart1RxData_Process((u8)(data&0xff));
    145              #else
    146                if(uart_txrx_q_full(WIFI_RX_INDEX) == 0)
    147                {
    148                    uart_txrx_q_put(WIFI_RX_INDEX,(u8)(data&0xff));
    149                }
    150              #endif    
    151            }
    152            
    153            if(sr == USART_IID_THRE)
    154            {
    155              if(uart_txrx_q_empty(WIFI_TX_INDEX))
    156              {
    157                ret = -1;
    158              }
    159              else
    160              {
    161                ret = uart_txrx_q_get(WIFI_TX_INDEX);//uart_out_3_getc( ) ; //
    162                //printf("ret %x\r\n",ret);
    163              }
    164          
    165              return ret;
    166            } 
    167            if(sr == USART_IID_CTI)
    168            {
    169            }
    170            if(sr == USART_IID_RLS)
    171            {
    172            }  
    173            return 0;
    174            //return ret;
    175          }
    176          
    177          void sys_uart_cfg(void)
    178          {
    179            //UserDmaInit_t   UserDmaInit;
    180            UserUartInit_t  UserUartInit;
    181          
    182            uart_debug = open(DEV_UART,USART_ID1);  
    183            UserUartInit.UartInit.USART_BaudRate   = 115200;                 
    184            UserUartInit.UartInit.USART_WordLength = USART_WORDLENGTH_8B;  
    185            UserUartInit.UartInit.USART_StopBits   = USART_STOPBITS_1;       
    186            UserUartInit.UartInit.USART_Parity     = USART_PARITY_NO;     
    187            UserUartInit.UartInit.USART_Mode       = USART_MODE_NORMAL;          
    188            UserUartInit.UartInit.USART_LSB_MSB    = USART_LSB_FIRST;
    189          	
    190            UserUartInit.UartMode.RxTxMode         = IRQ_MODE;//02:irq  0x1;//dma
    191            UserUartInit.UartMode.irqMode          = USART_IER_RDAIE;//0;//USART_IER_RDAIE;//no
    192            UserUartInit.UartMode.DmaMode          = DMA_RX_MODE;//1:rx  0:tx,rx 2:tx 
    193            UserUartInit.UartMode.RxTxEna          = UART_RXTX;//tx,rx
    194            
    195            ioctl(uart_debug,UART_INIT, &UserUartInit); 
    196            ioctl(uart_debug,UART_SET_CONSOLE, &uart_debug);//配置打印口
    197            request_irq(uart_debug, (long)debug_uart_handler,0); 
    198            
    199            UserUartInit.UartInit.USART_BaudRate   = 115200;     
    200            uart_ui = open(DEV_UART,UART_ID0);
    201            ioctl(uart_ui,UART_INIT, &UserUartInit); 
    202            request_irq(uart_ui, (long)ui_uart_handler,0);
    203          
    204          
    205            #ifdef USE_UART_WIFI 
    206            uart_wifi = open(DEV_UART,USART_ID0); 
    207            #ifdef USE_WIFI_DEMO_1
    208            UserUartInit.UartInit.USART_BaudRate   = 38400;
    209            #else
    210            UserUartInit.UartInit.USART_BaudRate   = 115200;
    211            #endif
    212            UserUartInit.UartInit.USART_WordLength = USART_WORDLENGTH_8B;  
    213            UserUartInit.UartInit.USART_StopBits   = USART_STOPBITS_1;       
    214            UserUartInit.UartInit.USART_Parity     = USART_PARITY_NO;//USART_PARITY_ODD;         
    215            UserUartInit.UartInit.USART_Mode       = USART_MODE_NORMAL;          
    216            UserUartInit.UartInit.USART_LSB_MSB    = USART_LSB_FIRST;
    217            UserUartInit.UartMode.RxTxMode         = IRQ_MODE;//CPU_MODE;//02:irq  0x1;//dma
    218            UserUartInit.UartMode.irqMode          = USART_IER_RDAIE;//0;//USART_IER_RDAIE;//no
    219            UserUartInit.UartMode.DmaMode          = 0;//DMA_RX_MODE;//1:rx  0:tx,rx 2:tx 
    220            UserUartInit.UartMode.RxTxEna          = UART_RXTX;//tx,rx
    221           // uart_init(wifi_uart_id, &UserUartInit);
    222            
    223            ioctl(uart_wifi,UART_INIT, &UserUartInit); 
    224            request_irq(uart_wifi, (long)wifi_uart_handler,0);
    225            #endif
    226          }
    227          
    228          void sys_uart_close(void)
    229          {
    230            close(uart_debug);
    231            close(uart_ui);
    232            close(uart_wifi);
    233          }
    234          
    235          void uart_test(void)
    236          {
    237              static int cnt = 0;
    238              int i = 0;
    239              u8 trig = 1;
    240              //write(uart_debug,"123456",6); //直接发送
    241              while(!uart_in_queue_is_empty())
    242              {
    243                printf(" %x \r\n",uart_in_queue_read());
    244              }
    245              cnt++;
    246              if(cnt > 3)
    247              {
    248                for(i = 0;i < 32; i++)
    249                {
    250                  uart_out_queue_write(i);//放入缓冲区，用中断发送
    251                }
    252                ioctl(uart_debug,UART_TRIG_TX,(void*)&trig);//触发一个发生中断
    253                cnt = 0;
    254              }  
    255          }
    256          
    257          void set_ui_uart_tx_fifo_empty_irq(void)
    258          {
    259              u8 trig = 1;
    260              ioctl(uart_ui,UART_TRIG_TX,(void*)&trig);//触发一个发生中断
    261          }
    262          void set_wifi_uart_tx_fifo_empty_irq(void)
    263          {
    264              u8 trig = 1;
    265              ioctl(uart_wifi,UART_TRIG_TX,(void*)&trig);//触发一个发生中断
    266          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   debug_uart_handler
       8   set_ui_uart_tx_fifo_empty_irq
         8   -- Indirect call
       8   set_wifi_uart_tx_fifo_empty_irq
         8   -- Indirect call
      40   sys_uart_cfg
        40   -- Indirect call
        40   -> request_irq
      16   sys_uart_close
         0   -- Indirect call
        16   -- Indirect call
       0   uart_in_queue_is_empty
       0   uart_in_queue_read
       0   uart_in_queue_write
       0   uart_out_queue_is_empty
       0   uart_out_queue_read
       0   uart_out_queue_write
      16   uart_test
        16   -- Indirect call
       8   ui_uart_handler
         8   -> uart_txrx_q_empty
         8   -> uart_txrx_q_get
       8   wifi_uart_handler
         8   -> IRQ_Usart1RxData_Process
         8   -> uart_txrx_q_empty
         8   -> uart_txrx_q_get


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
      20  ?Subroutine0
      24  ?Subroutine1
      14  ?Subroutine2
      10  ?Subroutine3
      14  debug_uart_handler
      12  set_ui_uart_tx_fifo_empty_irq
      12  set_wifi_uart_tx_fifo_empty_irq
     158  sys_uart_cfg
      34  sys_uart_close
      16  uart_debug
          uart_ui
          uart_wifi
          cnt
       4  uart_in_queue_is_empty
       4  uart_in_queue_read
       4  uart_in_queue_write
       4  uart_out_queue_is_empty
       4  uart_out_queue_read
       4  uart_out_queue_write
      50  uart_test
      34  ui_uart_handler
      44  wifi_uart_handler

 
  16 bytes in section .bss
 478 bytes in section .text
 
 478 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
