###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\wifi\uart_wifi_check.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\wifi\uart_wifi_check.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  
#        F:\海尔\新版+8k解码+预约\project\Debug\List\uart_wifi_check.lst
#    Object file  =  
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\uart_wifi_check.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\wifi\uart_wifi_check.c
      1          #include <ui-config.h>
      2          #include "ui-commands.h"
      3          #include "am_date_base.h"
      4          #include "am_config_macro.h"
      5          #include "time.h"
      6          #include "lib.h"
      7          #include "local_key_check.h"
      8          #include "syscall_api.h"
      9          
     10          #include "am_date_base.h"
     11          #include "ui-commands.h"
     12          #include "display.h"
     13          
     14          #ifdef USE_WIFI_DEMO_1
     15          #include "wifi_demo1/simwifi.h"
     16          #elif defined(USE_WIFI_DEMO_2)
     17          #include "wifi_demo2/simwifi_demo2.h"
     18          #endif
     19          #include "act.h"
     20          
     21          #if defined(USE_UART_WIFI)
     22          static U8 key_check[4];
     23          
     24          static cmd_state_t wifi_uart_cmd_state[UART_CMD_MAX]=
     25          {	
     26              {KEY_NULL, UART_START,       KEY_CLEAN},
     27              {KEY_NULL, UART_DOCK,        KEY_DOCK},
     28              {KEY_NULL, UART_STOP,        KEY_CLEAN},//
     29              {KEY_NULL, UART_LEFT,        KEY_LEFT},
     30              {KEY_NULL, UART_RIGHT,       KEY_RIGHT},
     31              {KEY_NULL, UART_FORWARD,     KEY_FORWARD},
     32              {KEY_NULL, UART_BACK,        KEY_BACKWARD},
     33              {KEY_NULL, UART_SPOT,        KEY_SPOT},
     34              {KEY_NULL, UART_QUIT,        KEY_POWER},
     35              {KEY_NULL, UART_POWER_ON,    KEY_POWER},
     36              {KEY_NULL, UART_POWER_DOWN,  KEY_POWER},
     37              {KEY_NULL, UART_WALL_FOLLOW, KEY_ADJUST},//    {KEY_NULL, UART_WALL_FOLLOW, KEY_WALLFLOW},
     38              {KEY_NULL, UART_ENHANCE,     KEY_ADJUST}, //   {KEY_NULL, UART_ENHANCE,     KEY_WALLFLOW},
     39              
     40          
     41          
     42                  
     43          };
     44          
     45          
     46          void uart_cmd_ext_handle(void)
     47          {
     48              U8 i;
     49              for(i=0;i<4;i++)
     50              {
     51                  if(key_check[i] >= 32)
     52                  {
     53                      wifi_uart_cmd_state[i+3].state = KEY_SHORT_UP;
     54                      key_check[i] = 0;
     55                  }
     56                  else if((key_check[i]>=1)&&(key_check[i]<32))
     57                  {
     58                      key_check[i]++;
     59                  }
     60              }
     61          }
     62          
     63          //64Hz call
     64          
     65          void wifi_uart_cmd_rounte(void)
     66          {
     67              int i = 0;
     68              U16 cmd = get_uart_cmd();
     69              for(i = 0;i<UART_CMD_MAX;i++)
     70              {
     71                if(cmd == wifi_uart_cmd_state[i].cmd_code)
     72                {
     73                    if((i==3)||(i==4)||(i==5)||(i==6)) //方向键处理
     74                    {
     75                        if(key_check[(i-3)] > 0)
     76                        {
     77                            wifi_uart_cmd_state[i].state = PRESS_NULL;
     78                        }
     79                        else
     80                        {
     81                            wifi_uart_cmd_state[i].state = KEY_DOWN;
     82                        }
     83                        key_check[0] = 0;
     84                        key_check[1] = 0;
     85                        key_check[2] = 0;
     86                        key_check[3] = 0;
     87                        key_check[(i-3)] = 1;
     88                        #ifdef USE_WIFI_DEMO_2
     89                        if((get_ui_state() == UI_ENTER_SLEEPING))
     90                        {
     91                            set_ui_state(UI_IDLE);
     92                           // return 0;
     93                        }
     94                        #endif
     95                    }
     96                    else
     97                    {
     98                        key_check[0] = 0;
     99                        key_check[1] = 0;
    100                        key_check[2] = 0;
    101                        key_check[3] = 0;
    102                       // printf("uart_cmd i=%d\r\n",i);
    103                        wifi_uart_cmd_state[i].state = KEY_SHORT_UP;
    104                    }
    105                     
    106                }
    107                else
    108                {
    109                    wifi_uart_cmd_state[i].state = PRESS_NULL;
    110                }
    111              }
    112              uart_cmd_ext_handle();
    113          }
    114          
    115          
    116          
    117          cmd_state_t *get_wifi_uart_cmd_state(void)
    118          {
    119              return &wifi_uart_cmd_state[0];
    120          }
    121          
    122          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   get_wifi_uart_cmd_state
       8   uart_cmd_ext_handle
      16   wifi_uart_cmd_rounte
        16   -> get_uart_cmd
         0   -> uart_cmd_ext_handle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  get_wifi_uart_cmd_state
       4  key_check
      40  uart_cmd_ext_handle
      94  wifi_uart_cmd_rounte
     104  wifi_uart_cmd_state

 
   4 bytes in section .bss
 104 bytes in section .data
 146 bytes in section .text
 
 146 bytes of CODE memory
 108 bytes of DATA memory

Errors: none
Warnings: none
