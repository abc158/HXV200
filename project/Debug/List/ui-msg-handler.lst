###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\海尔\新版+8k解码+预约\src\ui-manager\ui-msg-handler.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\ui-manager\ui-msg-handler.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ui-msg-handler.lst
#    Object file  =  
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ui-msg-handler.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\ui-manager\ui-msg-handler.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          #include "ui-manager.h"
      6          #include "ui-msg-handler.h"
      7          #include "ui-song-player.h"
      8          #include "syscall_api.h"
      9          #include <display.h>
     10          
     11          #include "state_view/state_view.h"
     12          
     13          extern void cleaning_complete_handle(void);
     14          /****************************************************************
     15          *Function   :  ui_msg_handle
     16          *Description:  系统给app发送消息的函数 
     17          *Input      :  UiMsgType msg:消息定义     
     18          *              int arg 参数
     19          *              void* data 数据存放的指针   
     20          *Output     :  无
     21          *Return     :  接收头接收到的数据
     22          *Others     :  
     23          ******************************************************************/
     24          int ui_msg_handle(UiMsgType msg, int arg, void* data)
     25          {
     26            view_msg(msg);
     27           // printf("luyanjin test msg=%0x\r\n",msg);
     28            switch(msg)
     29            {        
     30          //  case UI_MSG_BUTTON_REJECT:
     31          //    songplayer_play_id(SONG_ID_BUTTON_REJECT, 0);
     32          //    break;
     33              
     34           
     35              
     36          //  case UI_MSG_SLEEPING_ENTER:
     37          //    display_power_down();
     38          //    break;
     39          //  case UI_MSG_SLEEPING_EXIT:
     40          //    display_enter_idle();
     41          //    break;
     42              
     43          //  case UI_MSG_POWER_OFF_ENTER:
     44          //    display_power_off();
     45          //    songplayer_play_id(SONG_ID_POWER_OFF, 0);
     46          //    break;
     47          //    
     48          //  case UI_MSG_POWER_UP_OK:
     49          //    display_power_up();
     50          //    songplayer_play_id(SONG_ID_POWER_UP, 0);
     51          //    break;
     52              
     53          //  case UI_MSG_CRITICAL_LOW_POWER://严重低电
     54          //    display_critical_low_power();
     55          //    songplayer_play_id(SONG_ID_CRITICAL_LOW_POWER, 0);
     56          //    break;
     57          //  case UI_MSG_RESERVE_POWER://预留低电
     58          //    display_battery_reserve();
     59          //    songplayer_play_id(SONG_ID_RESERVE_POWER, 0);
     60          //    break;
     61          //  case UI_MSG_BATT_LOW://较低
     62          //    display_low_power();
     63          //    songplayer_play_id(SONG_ID_LOW_POWER, 0);
     64          //    break;
     65          //  case UI_MSG_BATT_ALMOST_FULL://几乎满电
     66          //    display_battery_almost_full();
     67          //    break;
     68          //  case UI_MSG_BATT_FULL://满电
     69          //    display_battery_full();
     70          //    break;              
     71              
     72          //  case UI_MSG_CHARGING_START:
     73          //    break;
     74          //  case UI_MSG_CHARGING_STARTED:
     75          //    display_charging_enter();
     76          //    songplayer_play_id(SONG_ID_CHARGING_START, 0);
     77          //    break;
     78          //  case UI_MSG_CHARGING_STOPPED:
     79          //    display_charging_stop();
     80          //    //songplayer_play_id(SONG_ID_CHARGING_STOP, 0);
     81          //    break;
     82          //  case UI_MSG_CHARGING_COMPLETE:
     83          //    display_charging_complete();
     84          //    //songplayer_play_id(SONG_ID_CHARGING_COMPLETE, 0);
     85          //    break;
     86              
     87          //  case UI_MSG_DOCKING_START:
     88          //    break;
     89          //  case UI_MSG_DOCKING_STARTED:
     90          //    display_docking_enter();
     91          //    songplayer_play_id(SONG_ID_DOCKING_START, 0);
     92          //    break;
     93          //  case UI_MSG_DOCKING_STOPPED:
     94          //    display_docking_stop();
     95          //    songplayer_play_id(SONG_ID_DOCKING_STOP, 0);
     96          //    printf("UI_MSG_DOCKING_STOPPED\r\n"); 
     97          //    break;
     98          //  case UI_MSG_DOCKING_COMPLETE:
     99          //    display_docking_complete();
    100          //    //songplayer_play_id(SONG_ID_DOCKING_COMPLETE, 0);    
    101          //    break;
    102              
    103          //  case UI_MSG_HOMING_START:
    104          //    break;
    105            case UI_MSG_HOMING_STARTED:  /*回到初始位置*/
    106              //display_homing_enter();
    107              songplayer_play_id(SONG_ID_HOMING_START, 0);
    108              break;
    109              
    110            case UI_MSG_HOMING_STOPPED:  /*停止回到初始位置*/
    111              //display_homing_stop();
    112              songplayer_play_id(SONG_ID_HOMING_STOP, 0);
    113              break;
    114              
    115            case UI_MSG_HOMING_COMPLETE: /*已经回到初始位置*/
    116              //display_homing_complete();
    117              songplayer_play_id(SONG_ID_HOMING_COMPLETE, 0); 
    118              break;
    119          //  case UI_MSG_CLEANING_START:
    120           //   songplayer_play_id(SONG_ID_NORMAL_CLEANING_START, 0); 
    121           //   break;        
    122          //  case UI_MSG_NORMAL_CLEANING_STARSONG_ID_NORMAL_CLEANING_STARTT:
    123              
    124          //   break;
    125          //  case UI_MSG_NORMAL_CLEANING_STARTED:
    126          //    display_normal_cleaning_enter();
    127          //    songplayer_play_id(SONG_ID_NORMAL_CLEANING_START, 0);
    128          //    break;
    129          //  case UI_MSG_NORMAL_CLEANING_STOPPED:
    130          //    display_normal_cleaning_stop();
    131          //    songplayer_play_id(SONG_ID_NORMAL_CLEANING_STOP, 0);
    132          //    break;
    133            
    134            case UI_MSG_CLEANING_COMPLETE:     /*清扫完成*/
    135          //    display_normal_cleaning_complete();
    136          //    printf("UI_MSG_CLEANING_COMPLETE!!!\r\n");
    137          //    songplayer_play_id(SONG_ID_NORMAL_CLEANING_COMPLETE, 1);
    138          	cleaning_complete_handle();  
    139              break;
    140              
    141            case UI_MSG_CLEANING_PICKUP_STOP:  /*清扫时被抬起*/
    142              songplayer_play_id(SONG_ID_BE_PICKED_UP, 0);
    143              break;
    144              
    145          //  case UI_MSG_SPOT_CLEANING_START:
    146          //    break;
    147          //  case UI_MSG_SPOT_CLEANING_STARTED:
    148          //    display_spot_cleaning_enter();
    149          //    songplayer_play_id(SONG_ID_SPOT_CLEANING_START, 0);
    150          //    break;
    151          //  case UI_MSG_SPOT_CLEANING_STOPPED:
    152          //    display_spot_cleaning_stop();
    153          //    songplayer_play_id(SONG_ID_SPOT_CLEANING_STOP, 0);
    154          //    break;
    155          //  case UI_MSG_SPOT_CLEANING_COMPLETE:
    156          //    display_spot_cleaning_complete();
    157          //    songplayer_play_id(SONG_ID_SPOT_CLEANING_COMPLETE, 0);
    158          //    break;
    159          //    
    160          //  case UI_MSG_WALLFOLLOW_CLEANING_START:
    161          //    break;
    162          //  case UI_MSG_WALLFOLLOW_CLEANING_STARTED:
    163          //    display_wallfollow_cleaning_enter();
    164          //    songplayer_play_id(SONG_ID_WALLFOLLOW_CLEANING_START, 0);
    165          //    break;
    166          //  case UI_MSG_WALLFOLLOW_CLEANING_STOPPED:
    167          //    display_wallfollow_cleaning_stop();
    168          //    songplayer_play_id(SONG_ID_WALLFOLLOW_CLEANING_STOP, 0);
    169          //    break;
    170          //  case UI_MSG_WALLFOLLOW_CLEANING_COMPLETE:
    171          //    display_wallfollow_cleaning_complete();
    172          //    songplayer_play_id(SONG_ID_WALLFOLLOW_CLEANING_COMPLETE, 0);
    173          //    break;
    174              
    175            default:
    176              break;
    177              
    178            }
    179            return 0;
    180          }
    181          
    182          
    183          
    184          
    185          
    186          
    187          
    188          
    189          
    190          
    191          
    192          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ui_msg_handle
         8   -> cleaning_complete_handle
         8   -> songplayer_play_id
         8   -> view_msg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      66  ui_msg_handle

 
 66 bytes in section .text
 
 66 bytes of CODE memory

Errors: none
Warnings: none
