###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        23/Sep/2017  15:46:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\海尔\新版+8k解码+预约\src\wall_follow\wall_follow_common.c
#    Command line =  
#        F:\海尔\新版+8k解码+预约\src\wall_follow\wall_follow_common.c -lcN
#        F:\海尔\新版+8k解码+预约\project\Debug\List\ --diag_error PE223 -o
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\ --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        F:\海尔\新版+8k解码+预约\project\..\lib\syscall_api.h -I
#        F:\海尔\新版+8k解码+预约\project\..\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\includes\ -I
#        F:\海尔\新版+8k解码+预约\project\..\lib\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\local_process\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\cfg\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\dock\ -I
#        F:\海尔\新版+8k解码+预约\project\..\src\guardrail\ -Ohz
#    List file    =  
#        F:\海尔\新版+8k解码+预约\project\Debug\List\wall_follow_common.lst
#    Object file  =  
#        F:\海尔\新版+8k解码+预约\project\Debug\Obj\wall_follow_common.o
#
###############################################################################

F:\海尔\新版+8k解码+预约\src\wall_follow\wall_follow_common.c
      1          #include "wall_follow_common.h"
      2          #include "syscall_api.h"
      3          #include "sensor/sensor.h"
      4          #include <math.h>
      5          
      6          
      7          //#define USE_WF_MID_CONTROL
      8          #define MID_THROD 500  //center throd to make robot turn away
      9          #define MID_PLUS  20
     10          #define WF_SPEED_VALUE 240           //the speed following wall
     11          #define WF_SPEED_SIGNAl_SMALL 150    //the speed turn to wall to find the signal
     12          
     13          #define IR_MIN_VALUE  90   //A3: 35
     14          #define IR_MAX_VALUE  800
     15          
     16          #define PID_INT_MAX_VAL 500
     17          #define WF_PID_p 0.0015//0.002
     18          #define WF_PID_i 0.00003//0.00005
     19          #define WF_PID_d 0.000015//0.00002
     20          
     21          #define TURN_COUNT_MAX 255  //150    //when no signal, inner speed is 1/5, after this time, speed set to zero, if 255, no such function
     22          
     23          #define PHYSIC_BUMP_ADAPTER_TARGET_VALUE     1/3  //when detect physic bump, max ir value plus this value
     24          #define NO_PHYSIC_BUMP_ADAPTER_TARGET_VALUE  5/6  //when detect no physic bump, max ir value plus this value
     25          
     26          #define USE_WF_NOT_CYCLE_PROCESS
     27          
     28          //#define OPEN_DEBUG_PRINT
     29          //#define OPEN_CYCLE_WF_PRINT
     30          
     31          #ifdef OPEN_DEBUG_PRINT
     32            #define AM_WF_DEBUG_PRINT(...)    printk(__VA_ARGS__);
     33          #else
     34            #define AM_WF_DEBUG_PRINT(...)
     35          #endif
     36          
     37          #ifdef OPEN_CYCLE_WF_PRINT
     38            #define AM_WF_CYCLE_DEBUG_PRINT(...)    printk(__VA_ARGS__);
     39          #else
     40            #define AM_WF_CYCLE_DEBUG_PRINT(...)
     41          #endif
     42          
     43          
     44          WfParames_t* WfParames_p;
     45          
     46          #define UTIL_CLIFF_MASK 0x1
     47          #define UTIL_DOCK_MASK  0x2
     48          // returns angle1-angle2, between -M_PI_F and M_PI_F
     49          float gyro_radian_diff_f(float angle1, float angle2)
     50          {
     51              float a = angle1 - angle2 + M_PI_F;
     52              if(a > 2*M_PI_F)
     53              {
     54                  a = a - 2*M_PI_F*floorf(a/(2*M_PI_F));
     55              }
     56              else if(a<0)
     57              {
     58                  a = a + 2*M_PI_F*(1+floorf(-a/(2*M_PI_F)));
     59              }
     60          
     61              return a - M_PI_F;
     62          }
     63          
     64          
     65          typedef struct _wf_global_par_t
     66          {
     67            float turn_target_angle;
     68            s16 ir_target_value;
     69            s16 ir_adapter_max;
     70            s32 pid_integrate;
     71            s32 pid_deritive;
     72            s16 ex_ir_error;
     73            u8 following_count; //increase counting when robot already following the wall
     74            u8 util;  //bit 0: cliff sig, bit 1: dock avoid sig
     75            u8 turn_count;
     76          }wf_g_par_t;
     77          
     78          #define FOLLOWING_COUNT_MAX 200
     79          #define FOLLOWING_COUNT_MIN 0
     80          
     81          typedef struct _sensor_data_t_
     82          {
     83            s16 ir_left_value;
     84            s16 ir_right_value;
     85          #ifdef USE_WF_MID_CONTROL
     86            s16 ir_mid_left_value;
     87            s16 ir_mid_right_value;
     88          #endif
     89          }ir_sensor_data_t;
     90          
     91          //avoid wall-follow turn cycle
     92          #ifdef USE_WF_NOT_CYCLE_PROCESS
     93          #define CYCLE_ARRAY_INDEX_MAX 16
     94          #define CYCLE_COUNT_MAX 3
     95          #define ANGLE_INTERVEL M_PI_F/4
     96          #define ANGLE_INTERVEL_TIME 2000
     97          #define WF_CYCLE_TIME_OUT_VAL 20000
     98          #define CYCLE_GO_MAX_DISTANCE 4.0f
     99          #define CYCLE_GO_MAX_TIMEOUT  20000
    100          typedef struct _wf_turn_array_t_
    101          {
    102            float x;
    103            float y;
    104            float angle;
    105            u32 stp;
    106          }wf_turn_array_t;
    107          
    108          wf_turn_array_t* wf_turn_array_p=NULL;
    109          
    110          u8 wf_turn_index_i;
    111          u8 wf_turn_good_count;
    112          BOOLEAN in_cycle_go_forward_sig;
    113          #endif
    114          
    115          wf_g_par_t wf_g_par;
    116          
    117          
    118          #ifdef USE_WF_NOT_CYCLE_PROCESS
    119          int cycle_check_function()
    120          {
    121            //check cycle or not
    122            wf_turn_array_t* wf_turn_at_p;
    123            wf_turn_array_t* wf_search_turn_p;
    124            u8 wf_search_trun_index;
    125            float now_angle,now_x,now_y;
    126            u32 now_stp;
    127            u8 i;
    128            float dist_temp;
    129          
    130              wf_turn_at_p = wf_turn_array_p + wf_turn_index_i;
    131              now_angle=wf_turn_at_p->angle;
    132              now_stp=wf_turn_at_p->stp;
    133              now_x=wf_turn_at_p->x;
    134              now_y=wf_turn_at_p->y;
    135              //search back
    136              wf_search_trun_index = (wf_turn_index_i==0)?(CYCLE_ARRAY_INDEX_MAX-1):(wf_turn_index_i-1);
    137              for(i=0;i<CYCLE_ARRAY_INDEX_MAX-2;i++)
    138              {
    139                wf_search_turn_p = wf_turn_array_p + wf_search_trun_index;
    140                dist_temp = (now_x-wf_search_turn_p->x)*(now_x-wf_search_turn_p->x)+(now_y-wf_search_turn_p->y)*(now_y-wf_search_turn_p->y);
    141                if(((now_stp-wf_search_turn_p->stp)>WF_CYCLE_TIME_OUT_VAL) && (dist_temp<0.5*0.5))
    142                {
    143                  return 0;  //timeout return
    144                }
    145                if(fabsf(gyro_radian_diff_f(now_angle,wf_search_turn_p->angle))<M_PI_F/4)
    146                {
    147                    if(fabsf(now_angle-wf_search_turn_p->angle)>(2*M_PI_F*7/8))
    148                    {
    149                      //check if it's the inner cycle or outer cycle, inner cycle mean cycle one small obstacle. we only check iner cycle.
    150                      if((WfParames_p->contact_side==AM_LEFT && (now_angle>wf_search_turn_p->angle)) || (WfParames_p->contact_side==AM_RIGHT && (now_angle<wf_search_turn_p->angle)))
    151                      {
    152                        //good value
    153                        AM_WF_CYCLE_DEBUG_PRINT("wf cy %d,%d\r\n", wf_search_trun_index,wf_turn_good_count);
    154                        wf_turn_good_count++;
    155                        if(wf_turn_good_count>CYCLE_COUNT_MAX)
    156                        {
    157                          return 1;
    158                        }
    159                        return 0;
    160                      }
    161                      else
    162                      {
    163                        AM_WF_CYCLE_DEBUG_PRINT("not inner %d,%d\r\n", wf_search_trun_index,wf_turn_good_count);
    164                      }
    165                    }
    166                }
    167                wf_search_trun_index = (wf_search_trun_index==0)?(CYCLE_ARRAY_INDEX_MAX-1):(wf_search_trun_index-1);
    168              }
    169              if(wf_turn_good_count>0)
    170              {
    171                wf_turn_good_count--;
    172              }
    173          
    174            return 0;
    175          }
    176          #endif
    177          
    178          void reload_sensor_data(ir_sensor_data_t* sensor_data)
    179          {
    180            sensor_data->ir_left_value=robot_signal_distance(LT_LEFT)>>1;
    181            sensor_data->ir_right_value=robot_signal_distance(LT_RIGHT)>>1;
    182          #ifdef USE_WF_MID_CONTROL
    183            sensor_data->ir_mid_left_value=robot_signal_distance(LT_CENTERLEFT)>>1;
    184            sensor_data->ir_mid_right_value=robot_signal_distance(LT_CENTERRIGHT)>>1;
    185          #endif
    186          }
    187          
    188          //turn the robot away from wall
    189          void turn_away_wall(s16* left_speed, s16* right_speed)
    190          {
    191            float angle_error = gyro_radian_diff_f(wf_g_par.turn_target_angle, get_gyro_radian());
    192            float angle_abs_error=fabsf(angle_error);
    193            float speed_val;
    194          
    195            if(angle_abs_error<M_PI_F/13)
    196            {
    197          	//reach the angle, stop and change status
    198              *left_speed=0;
    199              *right_speed=0;
    200              WfParames_p->wf_run_state=WF_STAT_FOLLOW; //change the state
    201              //AM_WF_DEBUG_PRINT("wf s c\r\n");
    202            }
    203            else
    204            {
    205          	//turn away from wall
    206              if(angle_error>0)
    207              {
    208                speed_val = MIN(angle_error, 1) * WF_SPEED_VALUE;
    209              }
    210              else
    211              {
    212                speed_val = MAX(angle_error, -1) * WF_SPEED_VALUE;
    213              }
    214              *left_speed=(s16)speed_val*-1;
    215              *right_speed=(s16)speed_val;
    216            }
    217          }
    218          
    219          
    220          void calculate_wheel_speed(s16 ir_error, s16* close_wheel, s16* far_wheel)
    221          {
    222            float cof;
    223          
    224            //this variable control the start speed
    225            wf_g_par.following_count = (wf_g_par.following_count<FOLLOWING_COUNT_MAX)?(wf_g_par.following_count+1):FOLLOWING_COUNT_MAX;
    226          
    227            //calculate the PID i
    228            wf_g_par.pid_integrate += ir_error;
    229            if(wf_g_par.pid_integrate>PID_INT_MAX_VAL)
    230            {
    231              wf_g_par.pid_integrate=PID_INT_MAX_VAL;
    232            }
    233            else if(wf_g_par.pid_integrate < (-1*PID_INT_MAX_VAL))
    234            {
    235              wf_g_par.pid_integrate=-1*PID_INT_MAX_VAL;
    236            }
    237          
    238            //calculate the PID d
    239            wf_g_par.pid_deritive = (ir_error-wf_g_par.ex_ir_error);
    240          
    241            //calculate PID
    242            cof = (float)ir_error*WF_PID_p + (float)wf_g_par.pid_integrate*WF_PID_i-(float)wf_g_par.pid_deritive*WF_PID_d;
    243            cof = MAX(MIN(fabsf(cof), 0.6f), 0.03f);
    244          
    245            //calculate speed
    246            if(ir_error>0)  //close to wall
    247            {
    248              *close_wheel=(s16)(WF_SPEED_VALUE);
    249              *far_wheel=(s16)((float)WF_SPEED_VALUE*(1-cof));
    250            }
    251            else if(ir_error<0) //far away from wall
    252            {
    253              *far_wheel=(s16)(WF_SPEED_VALUE);
    254              *close_wheel=(s16)((float)WF_SPEED_VALUE*(1-cof));
    255            }
    256            else
    257            {
    258              *far_wheel=WF_SPEED_VALUE;
    259              *close_wheel=WF_SPEED_VALUE;
    260            }
    261          
    262            //do the start speed control
    263            if(wf_g_par.following_count<FOLLOWING_COUNT_MAX-1)
    264            {
    265          	    *far_wheel=*far_wheel>>1;
    266          	    *close_wheel=*close_wheel>>1;
    267            }
    268            else
    269            {
    270              //AM_WF_DEBUG_PRINT("wf_f\r\n");
    271            }
    272          }
    273          
    274          void follow_wall_run(s16* left_speed, s16* right_speed, ir_sensor_data_t* sensor_data)
    275          {
    276            s16 ir_error=0;
    277          
    278            if(WfParames_p->contact_side == AM_LEFT)
    279            {
    280              if(sensor_data->ir_left_value < IR_MIN_VALUE)
    281              {
    282                //when the ir sensor value is small, just turn to wall
    283                *right_speed=WF_SPEED_SIGNAl_SMALL;
    284                if(wf_g_par.util & UTIL_CLIFF_MASK)
    285                {   //when cliff and dock avoid, the robot turn slowly
    286                  *left_speed=WF_SPEED_SIGNAl_SMALL/2;
    287                }
    288                else if(wf_g_par.util &  UTIL_DOCK_MASK)
    289                {
    290              	  *left_speed=WF_SPEED_SIGNAl_SMALL*7/11;
    291                }
    292                else
    293                {
    294              	  if(wf_g_par.turn_count<TURN_COUNT_MAX)
    295              	  {
    296                        *left_speed=WF_SPEED_SIGNAl_SMALL/5;
    297              	  }
    298              	  else   //delay a time, make robot one wheel stop, more closer to obstacle
    299              	  {
    300              		  *right_speed=WF_SPEED_SIGNAl_SMALL*3/4;
    301              		  *left_speed=WF_SPEED_SIGNAl_SMALL/8;
    302              	  }
    303                }
    304                AM_WF_DEBUG_PRINT("wf Lf %d\r\n", sensor_data->ir_left_value);
    305                wf_g_par.pid_integrate=0;
    306                wf_g_par.pid_deritive=0;
    307                wf_g_par.ex_ir_error=0;
    308                wf_g_par.following_count=FOLLOWING_COUNT_MIN;
    309                wf_g_par.turn_count = (wf_g_par.turn_count<253)?(wf_g_par.turn_count+1):253;
    310              }
    311              else
    312              {
    313                //when the signal is larger than threshold, do the pid control
    314                ir_error = sensor_data->ir_left_value - wf_g_par.ir_target_value;
    315          #ifdef USE_WF_MID_CONTROL
    316                if(sensor_data->ir_mid_left_value>(MID_THROD+wf_g_par.ir_target_value)/2)
    317                {
    318              	  ir_error += sensor_data->ir_mid_left_value*MID_PLUS;
    319                }
    320          #endif
    321                calculate_wheel_speed(ir_error, left_speed, right_speed);
    322                AM_WF_DEBUG_PRINT("wf Ls(%d,%d),%d,%d,(%d,%d)\r\n", *left_speed, *right_speed, ir_error,wf_g_par.following_count,sensor_data->ir_left_value, wf_g_par.ir_target_value);
    323                WfParames_p->wf_following_sig=TRUE;
    324                wf_g_par.util = 0;
    325                wf_g_par.turn_count=0;
    326              }
    327            }
    328            else  //AM_RIGHT
    329            {
    330              if(sensor_data->ir_right_value < IR_MIN_VALUE)
    331              {
    332                //when the ir sensor value is small, just turn to wall
    333                *left_speed=WF_SPEED_SIGNAl_SMALL;
    334                if(wf_g_par.util & UTIL_CLIFF_MASK)
    335                {
    336                    *right_speed=WF_SPEED_SIGNAl_SMALL/2;
    337                }
    338                else if(wf_g_par.util &  UTIL_DOCK_MASK)
    339                {
    340              	  *right_speed=WF_SPEED_SIGNAl_SMALL*7/11;
    341                }
    342                else
    343                {
    344            	    if(wf_g_par.turn_count<TURN_COUNT_MAX)
    345            	    {
    346                      *right_speed=WF_SPEED_SIGNAl_SMALL/5;
    347            	    }
    348            	    else   //delay a time, make robot one wheel stop, more closer to obstacle
    349            	    {
    350            	    	*left_speed=WF_SPEED_SIGNAl_SMALL*3/4;
    351            	  	    *right_speed=WF_SPEED_SIGNAl_SMALL/8;
    352            	    }
    353                }
    354                AM_WF_DEBUG_PRINT("wf Rf %d\r\n", sensor_data->ir_left_value);
    355                wf_g_par.pid_integrate=0;
    356                wf_g_par.pid_deritive=0;
    357                wf_g_par.ex_ir_error=0;
    358                wf_g_par.following_count=FOLLOWING_COUNT_MIN;
    359                wf_g_par.turn_count = (wf_g_par.turn_count<TURN_COUNT_MAX)?(wf_g_par.turn_count+1):TURN_COUNT_MAX;
    360              }
    361              else
    362              {
    363                //when the signal is larger than threshold, do the pid control
    364                ir_error = sensor_data->ir_right_value - wf_g_par.ir_target_value;
    365          #ifdef USE_WF_MID_CONTROL
    366                if(sensor_data->ir_mid_right_value>(MID_THROD+wf_g_par.ir_target_value)/2)
    367                {
    368              	  ir_error += sensor_data->ir_mid_right_value*MID_PLUS;
    369                }
    370          #endif
    371                calculate_wheel_speed(ir_error, right_speed, left_speed);
    372                AM_WF_DEBUG_PRINT("wf Rs(%d,%d),%d,%d,(%d,%d)\r\n", *left_speed, *right_speed, ir_error,wf_g_par.following_count,sensor_data->ir_right_value, wf_g_par.ir_target_value);
    373                WfParames_p->wf_following_sig=TRUE;
    374                wf_g_par.util = 0;
    375                wf_g_par.turn_count=0;
    376              }
    377            }
    378          
    379            wf_g_par.ex_ir_error=ir_error;
    380          }
    381          
    382          int wall_follow_start(AM_LeftRight contact_side, WfParames_t* wfp_p)
    383          {
    384            WfParames_p=wfp_p;
    385            if(WfParames_p->wf_run_state != WF_STAT_STOP && WfParames_p->contact_side==contact_side)
    386            {
    387                  AM_WF_DEBUG_PRINT("wf already run:%d\r\n", WfParames_p->contact_side);
    388                  return 1;
    389            }
    390            WfParames_p->wf_run_state = WF_STAT_FOLLOW;
    391            WfParames_p->contact_side=contact_side;
    392            wf_g_par.ir_target_value = IR_MIN_VALUE*2;  //set a init value, this variable should be changed during running
    393            wf_g_par.ir_adapter_max = 0;
    394            wfp_p->wf_following_sig=FALSE;
    395            AM_WF_DEBUG_PRINT("app wf s\r\n");
    396            //when state is not stop, and contact_side is different, what should do?
    397          #ifdef USE_WF_NOT_CYCLE_PROCESS
    398            if(wf_turn_array_p==NULL)
    399            {
    400              wf_turn_array_p = malloc(CYCLE_ARRAY_INDEX_MAX * sizeof(wf_turn_array_t));
    401              if(wf_turn_array_p!=NULL)
    402              {
    403                memset(wf_turn_array_p, 0, CYCLE_ARRAY_INDEX_MAX * sizeof(wf_turn_array_t));
    404              }
    405              wf_turn_index_i=0;
    406              wf_turn_good_count=0;
    407              in_cycle_go_forward_sig=FALSE;
    408            }
    409          #endif
    410            return 0;
    411          }
    412          
    413          void wall_follow_stop(WfParames_t* wfp_p)
    414          {
    415          	WfParames_p=wfp_p;
    416            if(WfParames_p->wf_run_state != WF_STAT_STOP)
    417            {
    418              WfParames_p->wf_run_state=WF_STAT_STOP;
    419            }
    420            AM_WF_DEBUG_PRINT("app wf e\r\n");
    421          #ifdef USE_WF_NOT_CYCLE_PROCESS
    422            if(wf_turn_array_p!=NULL)
    423            {
    424              free(wf_turn_array_p);
    425                wf_turn_array_p=NULL;
    426            }
    427          #endif
    428          }
    429          
    430          //wf_stae_value:
    431          //             WF_STAT_STOP=0
    432          //             WF_STAT_TURN=1
    433          //             WF_STAT_FOLLOW=2
    434          //When sytem process (bump, cliff, stuck), this callback will be block
    435          //This function will be called by system every 10mS.
    436          //Make sure there is no dead loop in the function.
    437          //return: 1: bump return,  2: cliff return,
    438          //      
    439          int wall_follow_callback(WfParames_t* wfp_p)
    440          {
    441            ir_sensor_data_t sensor_data;
    442            s16 ir_now_data;
    443          
    444            //update sensor data
    445            reload_sensor_data(&sensor_data);
    446          
    447            WfParames_p=wfp_p;
    448          
    449            //get the adaptive threshold
    450            if(WfParames_p->contact_side==AM_LEFT)
    451            {
    452          	  ir_now_data = sensor_data.ir_left_value;
    453            }
    454            else
    455            {
    456          	  ir_now_data = sensor_data.ir_right_value;
    457            }
    458            if(wf_g_par.ir_adapter_max<ir_now_data)
    459            {
    460          	  wf_g_par.ir_adapter_max = ir_now_data;
    461            }
    462            //physic bump need use small touch
    463            if(wfp_p->physic_bump==TRUE)
    464            {
    465               wf_g_par.ir_target_value = wf_g_par.ir_adapter_max*PHYSIC_BUMP_ADAPTER_TARGET_VALUE;
    466            }
    467            else
    468            {
    469              wf_g_par.ir_target_value = wf_g_par.ir_adapter_max*NO_PHYSIC_BUMP_ADAPTER_TARGET_VALUE;
    470            }
    471          
    472            if(wf_g_par.ir_target_value<IR_MIN_VALUE*1.5)
    473            {
    474              wf_g_par.ir_target_value=(s16)(IR_MIN_VALUE*1.5);
    475            }
    476            if(wf_g_par.ir_target_value>IR_MAX_VALUE)
    477            {
    478          	  wf_g_par.ir_target_value=IR_MAX_VALUE;
    479            }
    480          
    481            //process the bump
    482            if((WfParames_p->robot_bump != 0) && (WfParames_p->cliff_bump == 0))  //cliff has high priority
    483            {
    484              WfParames_p->wf_run_state=WF_STAT_TURN;
    485              if(WfParames_p->contact_side==AM_LEFT)
    486              {
    487                  //Note:it's better change the turn angle by the bump location or touch location
    488                  wf_g_par.turn_target_angle = get_gyro_radian() - M_PI_F/4.3f;
    489              }
    490              else  //AM_RIGHT
    491              {
    492              	//Note:it's better change the turn angle by the bump location or touch location
    493                  wf_g_par.turn_target_angle = get_gyro_radian() + M_PI_F/4.3f;
    494              }
    495              AM_WF_DEBUG_PRINT("app wf b(%d,%d)\r\n", (int)(get_gyro_radian()*100), (int)(wf_g_par.turn_target_angle*100));
    496              //check if robot is in dock region
    497              //if(in_dock_region())
    498              //wf_g_par.util |= UTIL_DOCK_MASK;
    499          
    500              wf_g_par.ir_adapter_max = wf_g_par.ir_adapter_max >> 2;
    501              wf_g_par.ir_target_value = wf_g_par.ir_target_value >> 2;
    502              AM_WF_DEBUG_PRINT("app new throd(%d,%d)\r\n", wf_g_par.ir_adapter_max, wf_g_par.ir_target_value);
    503              wfp_p->wf_following_sig=FALSE;
    504          #ifdef USE_WF_NOT_CYCLE_PROCESS
    505              in_cycle_go_forward_sig=FALSE;
    506          #endif
    507              return 1;  //return 1, let system process the bump
    508          
    509            }
    510          
    511            //process the cliff
    512            if(WfParames_p->cliff_bump != 0)
    513            {
    514              WfParames_p->wf_run_state=WF_STAT_TURN;
    515              if(WfParames_p->contact_side==AM_LEFT)
    516              {
    517                wf_g_par.turn_target_angle = get_gyro_radian() - M_PI_F/4.3f;
    518              }
    519              else  //AM_RIGHT
    520              {
    521                wf_g_par.turn_target_angle = get_gyro_radian() + M_PI_F/4.3f;
    522              }
    523              AM_WF_DEBUG_PRINT("app wf c(%d,%d)\r\n", (int)(get_gyro_radian()*100), (int)(wf_g_par.turn_target_angle*100));
    524              wf_g_par.util |= UTIL_CLIFF_MASK;
    525          
    526              wf_g_par.ir_target_value = wf_g_par.ir_target_value >> 2;
    527              wf_g_par.ir_adapter_max = wf_g_par.ir_adapter_max>>2;
    528              AM_WF_DEBUG_PRINT("app newc throd(%d,%d)\r\n", wf_g_par.ir_adapter_max, wf_g_par.ir_target_value);
    529              wfp_p->wf_following_sig=FALSE;
    530          #ifdef USE_WF_NOT_CYCLE_PROCESS
    531              in_cycle_go_forward_sig=FALSE;
    532          #endif
    533              return 2;  //return 2, let system process the cliff
    534            }
    535          
    536            //process dock signal
    537            if(WfParames_p->dock_sig != 0)
    538            {
    539                WfParames_p->wf_run_state=WF_STAT_TURN;
    540                if(WfParames_p->contact_side==AM_LEFT)
    541                {
    542                  wf_g_par.turn_target_angle = get_gyro_radian() - M_PI_F/2.1f;
    543                }
    544                else  //AM_RIGHT
    545                {
    546                  wf_g_par.turn_target_angle = get_gyro_radian() + M_PI_F/2.1f;
    547                }
    548                AM_WF_DEBUG_PRINT("wf d(%d,%d)\r\n", (int)(get_gyro_radian()*100), (int)(wf_g_par.turn_target_angle*100));
    549                wf_g_par.util |= UTIL_DOCK_MASK;
    550          
    551                wf_g_par.ir_target_value = wf_g_par.ir_target_value >> 2;
    552                wf_g_par.ir_adapter_max = wf_g_par.ir_adapter_max>>2;
    553                AM_WF_DEBUG_PRINT("newc throd(%d,%d)\r\n", wf_g_par.ir_adapter_max, wf_g_par.ir_target_value);
    554                wfp_p->wf_following_sig=FALSE;
    555          #ifdef USE_WF_NOT_CYCLE_PROCESS
    556                in_cycle_go_forward_sig=FALSE;
    557          #endif
    558                return 3;
    559            }
    560          
    561            switch(WfParames_p->wf_run_state)
    562            {
    563            case WF_STAT_TURN:
    564              turn_away_wall(&WfParames_p->left_speed_mmps, &WfParames_p->right_speed_mmps);
    565              wf_g_par.turn_count=0;
    566              break;
    567            case WF_STAT_FOLLOW:
    568              follow_wall_run(&WfParames_p->left_speed_mmps, &WfParames_p->right_speed_mmps, &sensor_data);
    569              break;
    570            default:
    571              break;
    572            }
    573          
    574            //make sure the wall follow don't go in cycle
    575            //this process is at last, so it has highest priority
    576          #ifdef USE_WF_NOT_CYCLE_PROCESS
    577            if(wf_turn_array_p!=NULL)
    578            {
    579              AM_Pose robot_pose;
    580              wf_turn_array_t* wf_turn_at_p;
    581              u8 index_ex;
    582              float angle_diff;
    583          
    584              //store the angle record
    585              robot_pos_get(&robot_pose);
    586              //check if the data need to be stored or not
    587              index_ex=(wf_turn_index_i==0)?(CYCLE_ARRAY_INDEX_MAX-1):(wf_turn_index_i-1);
    588              wf_turn_at_p = wf_turn_array_p + index_ex;
    589              angle_diff=fabsf(gyro_radian_diff_f(wf_turn_at_p->angle, robot_pose.angle));
    590          
    591              if(angle_diff>ANGLE_INTERVEL || timer_elapsed(wf_turn_at_p->stp)>ANGLE_INTERVEL_TIME)
    592              { //record the data in circle array
    593                wf_turn_at_p = wf_turn_array_p + wf_turn_index_i;
    594                wf_turn_at_p->x=robot_pose.xy.x;
    595                wf_turn_at_p->y=robot_pose.xy.y;
    596                wf_turn_at_p->angle=robot_pose.angle;
    597                wf_turn_at_p->stp=timer_ms();
    598                AM_WF_CYCLE_DEBUG_PRINT("wf rec (%d,%d),%d\r\n", (int)( wf_turn_at_p->angle*1000), wf_turn_at_p->stp,wf_turn_index_i);
    599                //turn cycle process function
    600                if(cycle_check_function()>0)
    601                {
    602                  //process go forward
    603                  memset(wf_turn_array_p, 0, CYCLE_ARRAY_INDEX_MAX * sizeof(wf_turn_array_t));
    604                  wf_turn_index_i=0;
    605                  wf_turn_good_count=0;
    606                  //the first data the record the position and time
    607                  wf_turn_at_p = wf_turn_array_p + wf_turn_index_i;
    608                  wf_turn_at_p->x=robot_pose.xy.x;
    609                  wf_turn_at_p->y=robot_pose.xy.y;
    610                  wf_turn_at_p->angle=robot_pose.angle;
    611                  wf_turn_at_p->stp=timer_ms();
    612                  in_cycle_go_forward_sig=TRUE;
    613                  AM_WF_CYCLE_DEBUG_PRINT("wf in cyc\r\n");
    614                }
    615                wf_turn_index_i = (wf_turn_index_i<CYCLE_ARRAY_INDEX_MAX-1)?(wf_turn_index_i+1):0;
    616              }
    617          
    618                //do go forward
    619                if(in_cycle_go_forward_sig==TRUE)
    620                {
    621                  AM_xy start_xy;
    622                  float go_distance;
    623                  start_xy.x=wf_turn_array_p->x;
    624                  start_xy.y=wf_turn_array_p->y;
    625                  go_distance=robot_xy_dist(&robot_pose.xy, &start_xy);
    626                  if((go_distance>CYCLE_GO_MAX_DISTANCE) || (timer_elapsed(wf_turn_array_p->stp)>CYCLE_GO_MAX_TIMEOUT))
    627                  { //add max distance and timeout check
    628                    wfp_p->left_speed_mmps=0;
    629                    wfp_p->right_speed_mmps=0;
    630                    in_cycle_go_forward_sig=FALSE;
    631                    AM_WF_CYCLE_DEBUG_PRINT("wf cycle stop\r\n");
    632                    return 0;
    633                  }
    634                  wfp_p->left_speed_mmps=WF_SPEED_VALUE;
    635                  wfp_p->right_speed_mmps=WF_SPEED_VALUE;
    636                  //AM_WF_CYCLE_DEBUG_PRINT("wf cycle line\r\n");
    637                }
    638            }
    639          
    640          #endif
    641          
    642            return 0;
    643          }
    644          
    645          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   calculate_wheel_speed
        32   -> __aeabi_d2f
        32   -> __aeabi_dadd
        32   -> __aeabi_dmul
        32   -> __aeabi_dsub
        32   -> __aeabi_f2d
        32   -> __aeabi_f2iz
        32   -> __aeabi_fmul
        32   -> __aeabi_fsub
        32   -> __aeabi_i2f
        32 __aeabi_cfcmple
        32 __aeabi_cfrcmple
      48   cycle_check_function
        48   -> __aeabi_fadd
        48   -> __aeabi_fmul
        48   -> __aeabi_fsub
        48   -> gyro_radian_diff_f
        48 __aeabi_cfcmple
        48 __aeabi_cfrcmple
      16   follow_wall_run
        16   -> calculate_wheel_speed
      16   gyro_radian_diff_f
         0   -> __aeabi_fadd
        16   -> __aeabi_fadd
        16   -> __aeabi_fdiv
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
        16   -> floorf
        16 __aeabi_cfcmple
        16 __aeabi_cfrcmple
       8   reload_sensor_data
         8   -> robot_signal_distance
      24   turn_away_wall
        24   -> __aeabi_f2iz
        24   -> __aeabi_fmul
        24   -> get_gyro_radian
        24   -> gyro_radian_diff_f
        24 __aeabi_cfcmple
        24 __aeabi_cfrcmple
      48   wall_follow_callback
        48   -- Indirect call
        48   -> __aeabi_fadd
        48   -> __aeabi_memclr4
        48   -> cycle_check_function
        48   -> get_gyro_radian
        48   -> gyro_radian_diff_f
        48   -> reload_sensor_data
        48   -> robot_xy_dist
        48   -> timer_elapsed
        48   -> timer_ms
        48   -> turn_away_wall
        48 __aeabi_cfrcmple
       8   wall_follow_start
         8   -> __aeabi_memclr4
         8   -> malloc
       8   wall_follow_stop
         8   -> free


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      16  ?Subroutine0
      12  ?Subroutine1
      12  ?Subroutine2
      26  ?Subroutine3
     280  calculate_wheel_speed
     242  cycle_check_function
     166  follow_wall_run
     112  gyro_radian_diff_f
      26  reload_sensor_data
     112  turn_away_wall
     474  wall_follow_callback
      72  wall_follow_start
      28  wall_follow_stop
      36  wf_g_par
          wf_turn_index_i
          wf_turn_good_count
          in_cycle_go_forward_sig
          WfParames_p
          wf_turn_array_p

 
    36 bytes in section .bss
 1 686 bytes in section .text
 
 1 686 bytes of CODE memory
    36 bytes of DATA memory

Errors: none
Warnings: none
